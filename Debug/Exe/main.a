;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;ï¿½ Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 3 Phase curent protect
;Version : 1.0
;Date    : 05/11/2018
;Author  :
;Company :
;Comments:
;Doc dien ap tu 3 pha, so sanh voi dien ap cai dat.
;Dieu khien ngat dong dau vao khi dong tieu thu lon hon dong cai dat
;
;
;Chip type               : ATtiny24
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 8
;*******************************************************/
;
;#include <tiny24.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;#define	current_1	1
;#define	current_2	2
;#define	current_3	3
;#define	current_set	7
;
;#define	num_sample	10
;
;#define	current_scale	10
;
;#define	CURRENT_SET_MAX	16
;#define	CURRENT_SET_MIN	8
;
;//#define	v_num_noise_filter	3
;
;#define	DO_CONTROL_BUZZER	PORTB.0
;#define	DO_CONTROL_RELAY	PORTB.1
;
;#define	BUZZER_ON	DO_CONTROL_BUZZER = 1
;#define	BUZZER_OFF	DO_CONTROL_BUZZER = 0
;
;#define	RELAY_ON	DO_CONTROL_RELAY = 1
;#define	RELAY_OFF	DO_CONTROL_RELAY = 0
;
;
;#define	Err	0
;#define	Ok	1
;#define	Processing	2
;
;unsigned int	Uint_Current1_adc[num_sample];
;unsigned int	Uint_Current2_adc[num_sample];
;unsigned int	Uint_Current3_adc[num_sample];
;unsigned int	Uint_CurrentSet_adc[num_sample];
;unsigned char	Uchar_Sample_count;
;
;bit	Bit_AdcSample_full = 0;
;
;bit	Bit_TimerOverflow = 0;
;
;/*-----------------------------------------------------*/
;// Timer1 overflow interrupt service routine
;// Timer 10ms
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0047 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0048 // Reinitialize Timer1 value
; 0000 0049 	TCNT1H=0xCF2C >> 8;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004A 	TCNT1L=0xCF2C & 0xff;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004B 	// TCNT1H=0x85EE >> 8;
; 0000 004C 	// TCNT1L=0x85EE & 0xff;
; 0000 004D 	Bit_TimerOverflow = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 004E }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
;
;// Read the AD conversion result
;// ADC 10 bit
;unsigned int read_adc(unsigned char adc_input)
; 0000 0058 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0059 	ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
;PCODE: $00000018 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 005A 	// Delay needed for the stabilization of the ADC input voltage
; 0000 005B 	delay_us(10);
;PCODE: $0000001D VOL: 0
; 0000 005C 	// Start the AD conversion
; 0000 005D 	ADCSRA|=(1<<ADSC);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 005E 	// Wait for the AD conversion to complete
; 0000 005F 	while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0060 	ADCSRA|=(1<<ADIF);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0061 	return ADCW;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0062 }
;PCODE: $0000002B VOL: 0
;
;/*
;*	Doc gia tri ADC cac dong dien theo chu ki cua timer.
;*	Lay gia tri trung binh cac thong so doc duoc.
;* 	So sanh dong dien tieu thu (1,2,3) voi gia tri cai dat (current_set)
;*	Bat co canh bao khi dong dien tieu thi lon hon cai dat.
;*/
;unsigned char	Current_get_value(void)
; 0000 006B {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006C 	if(Bit_TimerOverflow)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 006D 	{
; 0000 006E 		unsigned char	Uchar_loop_cnt = 0;
; 0000 006F 		unsigned int	Uint_Current_value = 0;
; 0000 0070 		unsigned int	Uint_CurrentSet_value = 0;
; 0000 0071 
; 0000 0072 		Bit_TimerOverflow = 0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;	Uchar_loop_cnt -> Y+4
;	Uint_Current_value -> Y+2
;	Uint_CurrentSet_value -> Y+0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0073 
; 0000 0074 		Uint_Current1_adc[Uchar_Sample_count] = read_adc(current_1);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0075 		Uint_Current2_adc[Uchar_Sample_count] = read_adc(current_2);
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0076 		Uint_Current3_adc[Uchar_Sample_count] = read_adc(current_3);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0077 		Uint_CurrentSet_adc[Uchar_Sample_count] = read_adc(current_set);
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0078 
; 0000 0079 		Uchar_Sample_count++;
;PCODE: $00000062 VOL: 0
; 0000 007A 		if(Uchar_Sample_count >= num_sample)
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 007B 		{
; 0000 007C 			Uchar_Sample_count = 0;
;PCODE: $00000066 VOL: 0
; 0000 007D 			Bit_AdcSample_full = 1;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007E 		}
; 0000 007F 
; 0000 0080 
; 0000 0081 		if(Bit_AdcSample_full == 0)
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0082 		{
; 0000 0083 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0084 			{
; 0000 0085 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0086 			}
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0087 			Uint_CurrentSet_value /= Uchar_loop_cnt;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 0088 			if(Uint_CurrentSet_value >= 840)	Uint_CurrentSet_value = 840;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0089 			Uint_CurrentSet_value = (Uint_CurrentSet_value*10/840)*(CURRENT_SET_MAX - CURRENT_SET_MIN) + CURRENT_SET_MIN*10;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 008A 
; 0000 008B 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 008C 			{
; 0000 008D 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 008E 			}
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 008F 			Uint_Current_value /= Uchar_loop_cnt;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0090 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0091 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0092 
; 0000 0093 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0094 			{
; 0000 0095 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0096 			}
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0097 			Uint_Current_value /= Uchar_loop_cnt;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0098 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0099 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 009A 
; 0000 009B 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt <= Uchar_Sample_count; Uchar_loop_cnt++)
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 009C 			{
; 0000 009D 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 009E 			}
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 009F 			Uint_Current_value /= Uchar_loop_cnt;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 00A0 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00A1 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00A2         }
;PCODE: $00000125 VOL: 0
; 0000 00A3 		else
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00A4 		{
; 0000 00A5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 00A6 			{
; 0000 00A7 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 00A8 			}
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A9 			Uint_CurrentSet_value /= num_sample;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 00AA 			if(Uint_CurrentSet_value >= 840)	Uint_CurrentSet_value = 840;
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00AB 			Uint_CurrentSet_value = (Uint_CurrentSet_value*10/840)*(CURRENT_SET_MAX - CURRENT_SET_MIN) + CURRENT_SET_MIN*10;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00AC 
; 0000 00AD 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00AE 			{
; 0000 00AF 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00B0 			}
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 00B1 			Uint_Current_value /=num_sample;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 00B2 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00B3 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 00B4 
; 0000 00B5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 00B6 			{
; 0000 00B7 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 00B8 			}
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 00B9 			Uint_Current_value /=num_sample;
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00BA 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 00BB 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 00BC 
; 0000 00BD 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 00BE 			{
; 0000 00BF 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 00C0 			}
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0000 00C1 			Uint_Current_value /= num_sample;
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 00C2 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 00C3 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 00C4 		}
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
; 0000 00C5 		return Ok;
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 00C6 	}
;PCODE: $000001E1 VOL: 0
; 0000 00C7 	return Processing;
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 00C8 }
;PCODE: $000001E5 VOL: 0
;
;
;/*
;*	Dieu khien cac tin hieu canh bao dua vao trang thai cac co canh bao
;*/
;void	Protect_control(void)
; 0000 00CF {
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00D0 	unsigned char	Uchar_respone = Processing;
; 0000 00D1 	Uchar_respone = Current_get_value();
;PCODE: $000001E8 VOL: 0
;	Uchar_respone -> R17
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 00D2 	if(Uchar_respone == Err)
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 00D3 	{
; 0000 00D4 		BUZZER_ON;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 00D5 		RELAY_ON;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00D6 	}
; 0000 00D7 	else if(Uchar_respone == Ok)
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 00D8 	{
; 0000 00D9 		BUZZER_OFF;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 00DA 		RELAY_OFF;
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
; 0000 00DB 	}
; 0000 00DC }
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;
;void main(void)
; 0000 00DF {
;PCODE: $00000201 VOL: 0
; 0000 00E0 // Declare your local variables here
; 0000 00E1 // Crystal Oscillator division factor: 1
; 0000 00E2 #pragma optsize-
; 0000 00E3 CLKPR=(1<<CLKPCE);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
; 0000 00E4 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 00E5 #ifdef _OPTIMIZE_SIZE_
; 0000 00E6 #pragma optsize+
; 0000 00E7 #endif
; 0000 00E8 // Input/Output Ports initialization
; 0000 00E9 // Port A initialization
; 0000 00EA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00EB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 00EC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00ED PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
; 0000 00EE 
; 0000 00EF // Port B initialization
; 0000 00F0 // Function: Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 00F1 DDRB=(1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
; 0000 00F2 // State: Bit3=0 Bit2=T Bit1=0 Bit0=0
; 0000 00F3 PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 00F4 
; 0000 00F5 // Timer/Counter 0 initialization
; 0000 00F6 // Clock source: System Clock
; 0000 00F7 // Clock value: Timer 0 Stopped
; 0000 00F8 // Mode: Normal top=0xFF
; 0000 00F9 // OC0A output: Disconnected
; 0000 00FA // OC0B output: Disconnected
; 0000 00FB TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 00FC TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
; 0000 00FD TCNT0=0x00;
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 00FE OCR0A=0x00;
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 00FF OCR0B=0x00;
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0100 
; 0000 0101 // Timer/Counter 1 initialization
; 0000 0102 // Clock source: System Clock
; 0000 0103 // Clock value: 125,000 kHz
; 0000 0104 // Mode: Normal top=0xFFFF
; 0000 0105 // OC1A output: Disconnected
; 0000 0106 // OC1B output: Disconnected
; 0000 0107 // Noise Canceler: Off
; 0000 0108 // Input Capture on Falling Edge
; 0000 0109 // Timer Period: 0,1 s
; 0000 010A // Timer1 Overflow Interrupt: On
; 0000 010B // Input Capture Interrupt: Off
; 0000 010C // Compare A Match Interrupt: Off
; 0000 010D // Compare B Match Interrupt: Off
; 0000 010E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 010F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0110 TCNT1H=0xCF;
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 0111 TCNT1L=0x2C;
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0112 ICR1H=0x00;
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 0113 ICR1L=0x00;
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0114 OCR1AH=0x00;
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 0115 OCR1AL=0x00;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0116 OCR1BH=0x00;
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0117 OCR1BL=0x00;
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0118 // // Timer/Counter 1 initialization
; 0000 0119 // // Clock source: System Clock
; 0000 011A // // Clock value: 31.250 kHz
; 0000 011B // // Mode: Normal top=0xFFFF
; 0000 011C // // OC1A output: Disconnected
; 0000 011D // // OC1B output: Disconnected
; 0000 011E // // Noise Canceler: Off
; 0000 011F // // Input Capture on Falling Edge
; 0000 0120 // // Timer Period: 1 s
; 0000 0121 // // Timer1 Overflow Interrupt: On
; 0000 0122 // // Input Capture Interrupt: Off
; 0000 0123 // // Compare A Match Interrupt: Off
; 0000 0124 // // Compare B Match Interrupt: Off
; 0000 0125 // TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
; 0000 0126 // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
; 0000 0127 // TCNT1H=0x85;
; 0000 0128 // TCNT1L=0xEE;
; 0000 0129 // ICR1H=0x00;
; 0000 012A // ICR1L=0x00;
; 0000 012B // OCR1AH=0x00;
; 0000 012C // OCR1AL=0x00;
; 0000 012D // OCR1BH=0x00;
; 0000 012E // OCR1BL=0x00;
; 0000 012F // Timer/Counter 0 Interrupt(s) initialization
; 0000 0130 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0131 
; 0000 0132 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0133 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 0134 
; 0000 0135 // External Interrupt(s) initialization
; 0000 0136 // INT0: Off
; 0000 0137 // Interrupt on any change on pins PCINT0-7: Off
; 0000 0138 // Interrupt on any change on pins PCINT8-11: Off
; 0000 0139 MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 013A GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 013B 
; 0000 013C // USI initialization
; 0000 013D // Mode: Disabled
; 0000 013E // Clock source: Register & Counter=no clk.
; 0000 013F // USI Counter Overflow Interrupt: Off
; 0000 0140 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
; 0000 0141 
; 0000 0142 // Analog Comparator initialization
; 0000 0143 // Analog Comparator: Off
; 0000 0144 // The Analog Comparator's positive input is
; 0000 0145 // connected to the AIN0 pin
; 0000 0146 // The Analog Comparator's negative input is
; 0000 0147 // connected to the AIN1 pin
; 0000 0148 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
; 0000 0149 // Digital input buffer on AIN0: On
; 0000 014A // Digital input buffer on AIN1: On
; 0000 014B DIDR0=(0<<ADC1D) | (0<<ADC2D);
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 014C 
; 0000 014D 
; 0000 014E // ADC initialization
; 0000 014F // ADC Clock frequency: 1000.000 kHz
; 0000 0150 // ADC Voltage Reference: AVCC pin
; 0000 0151 // ADC Bipolar Input Mode: Off
; 0000 0152 // ADC Auto Trigger Source: ADC Stopped
; 0000 0153 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
; 0000 0154 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
; 0000 0155 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
; 0000 0156 ADMUX=ADC_VREF_TYPE;
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0157 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0158 ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0159 
; 0000 015A 
; 0000 015B // Watchdog Timer initialization
; 0000 015C // Watchdog Timer Prescaler: OSC/2k
; 0000 015D // Watchdog timeout action: Reset
; 0000 015E //#pragma optsize-
; 0000 015F //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
; 0000 0160 //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
; 0000 0161 //#ifdef _OPTIMIZE_SIZE_
; 0000 0162 //#pragma optsize+
; 0000 0163 //#endif
; 0000 0164 
; 0000 0165 // Global enable interrupts
; 0000 0166 #asm("sei")
;PCODE: $00000242 VOL: 0
	sei
;PCODE: $00000243 VOL: 0
; 0000 0167 	while (1)
;PCODE: $00000244 VOL: 0
; 0000 0168 	{
; 0000 0169 		Protect_control();
;PCODE: $00000245 VOL: 0
; 0000 016A 	}
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
; 0000 016B }
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
