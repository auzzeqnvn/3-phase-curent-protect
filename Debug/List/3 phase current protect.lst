
AVRASM ver. 2.1.30  D:\My Data\TanPhat\3-phase-curent-protect\Debug\List\3 phase current protect.asm Sat Nov 10 21:18:59 2018

D:\My Data\TanPhat\3-phase-curent-protect\Debug\List\3 phase current protect.asm(987): warning: Register r3 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24A
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 8 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24A
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0008
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uchar_Sample_count=R3
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c01e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000017 93ed      	ST   X+,R30
000018 958a      	DEC  R24
000019 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00001b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00001f e0e0      	LDI  R30,__GPIOR0_INIT
000020 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000021 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000022 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000023 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000024 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000025 e6c8      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000026 c0c8      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x68
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase curent protect
                 ;Version : 1.0
                 ;Date    : 05/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Doc dien ap tu 3 pha, so sanh voi dien ap cai dat.
                 ;Dieu khien ngat dong dau vao khi dong tieu thu lon hon dong cai dat
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 8
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#define	current_1	1
                 ;#define	current_2	2
                 ;#define	current_3	3
                 ;#define	current_set	7
                 ;
                 ;#define	num_sample	10
                 ;
                 ;#define	current_scale	10
                 ;
                 ;#define	CURRENT_SET_MAX	16
                 ;#define	CURRENT_SET_MIN	8
                 ;
                 ;//#define	v_num_noise_filter	3
                 ;
                 ;#define	DO_CONTROL_BUZZER	PORTB.0
                 ;#define	DO_CONTROL_RELAY	PORTB.1
                 ;
                 ;#define	BUZZER_ON	DO_CONTROL_BUZZER = 1
                 ;#define	BUZZER_OFF	DO_CONTROL_BUZZER = 0
                 ;
                 ;#define	RELAY_ON	DO_CONTROL_RELAY = 1
                 ;#define	RELAY_OFF	DO_CONTROL_RELAY = 0
                 ;
                 ;
                 ;#define	Err	0
                 ;#define	Ok	1
                 ;#define	Processing	2
                 ;
                 ;unsigned int	Uint_Current1_adc[num_sample];
                 ;unsigned int	Uint_Current2_adc[num_sample];
                 ;unsigned int	Uint_Current3_adc[num_sample];
                 ;unsigned int	Uint_CurrentSet_adc[num_sample];
                 ;unsigned char	Uchar_Sample_count;
                 ;
                 ;bit	Bit_AdcSample_full = 0;
                 ;
                 ;bit	Bit_TimerOverflow = 0;
                 ;
                 ;/*-----------------------------------------------------*/
                 ;// Timer1 overflow interrupt service routine
                 ;// Timer 10ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0047 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000027 93ea      	ST   -Y,R30
                 ; 0000 0048 // Reinitialize Timer1 value
                 ; 0000 0049 	TCNT1H=0xCF2C >> 8;
000028 d0f7      	RCALL SUBOPT_0x0
                 ; 0000 004A 	TCNT1L=0xCF2C & 0xff;
                 ; 0000 004B 	// TCNT1H=0x85EE >> 8;
                 ; 0000 004C 	// TCNT1L=0x85EE & 0xff;
                 ; 0000 004D 	Bit_TimerOverflow = 1;
000029 9a99      	SBI  0x13,1
                 ; 0000 004E }
00002a 91e9      	LD   R30,Y+
00002b 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;// ADC 10 bit
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0058 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0059 	ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
00002c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00002d 81e8      	LD   R30,Y
00002e 73ef      	ANDI R30,LOW(0x3F)
00002f b9e7      	OUT  0x7,R30
                 ; 0000 005A 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005B 	delay_us(10);
                +
000030 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000031 958a     +DEC R24
000032 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 005C 	// Start the AD conversion
                 ; 0000 005D 	ADCSRA|=(1<<ADSC);
000033 9a36      	SBI  0x6,6
                 ; 0000 005E 	// Wait for the AD conversion to complete
                 ; 0000 005F 	while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
000034 9b34      	SBIS 0x6,4
000035 cffe      	RJMP _0x5
                 ; 0000 0060 	ADCSRA|=(1<<ADIF);
000036 9a34      	SBI  0x6,4
                 ; 0000 0061 	return ADCW;
000037 b1e4      	IN   R30,0x4
000038 b1f5      	IN   R31,0x4+1
000039 9621      	ADIW R28,1
00003a 9508      	RET
                 ; 0000 0062 }
                 ; .FEND
                 ;
                 ;/*
                 ;*	Doc gia tri ADC cac dong dien theo chu ki cua timer.
                 ;*	Lay gia tri trung binh cac thong so doc duoc.
                 ;* 	So sanh dong dien tieu thu (1,2,3) voi gia tri cai dat (current_set)
                 ;*	Bat co canh bao khi dong dien tieu thi lon hon cai dat.
                 ;*/
                 ;unsigned char	Current_get_value(void)
                 ; 0000 006B {
                 _Current_get_value:
                 ; .FSTART _Current_get_value
                 ; 0000 006C 	if(Bit_TimerOverflow)
00003b 9b99      	SBIS 0x13,1
00003c c0a1      	RJMP _0x8
                 ; 0000 006D 	{
                 ; 0000 006E 		unsigned char	Uchar_loop_cnt = 0;
                 ; 0000 006F 		unsigned int	Uint_Current_value = 0;
                 ; 0000 0070 		unsigned int	Uint_CurrentSet_value = 0;
                 ; 0000 0071 
                 ; 0000 0072 		Bit_TimerOverflow = 0;
00003d 9725      	SBIW R28,5
00003e e0e0      	LDI  R30,LOW(0)
00003f 83e8      	ST   Y,R30
000040 83e9      	STD  Y+1,R30
000041 83ea      	STD  Y+2,R30
000042 83eb      	STD  Y+3,R30
000043 d0e1      	RCALL SUBOPT_0x1
                 ;	Uchar_loop_cnt -> Y+4
                 ;	Uint_Current_value -> Y+2
                 ;	Uint_CurrentSet_value -> Y+0
000044 9899      	CBI  0x13,1
                 ; 0000 0073 
                 ; 0000 0074 		Uint_Current1_adc[Uchar_Sample_count] = read_adc(current_1);
000045 2de3      	MOV  R30,R3
000046 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
000047 d0e0      	RCALL SUBOPT_0x2
000048 93ef      	PUSH R30
000049 e0a1      	LDI  R26,LOW(1)
00004a dfe1      	RCALL _read_adc
00004b 91af      	POP  R26
00004c d0de      	RCALL SUBOPT_0x3
                 ; 0000 0075 		Uint_Current2_adc[Uchar_Sample_count] = read_adc(current_2);
00004d e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
00004e d0d9      	RCALL SUBOPT_0x2
00004f 93ef      	PUSH R30
000050 e0a2      	LDI  R26,LOW(2)
000051 dfda      	RCALL _read_adc
000052 91af      	POP  R26
000053 d0d7      	RCALL SUBOPT_0x3
                 ; 0000 0076 		Uint_Current3_adc[Uchar_Sample_count] = read_adc(current_3);
000054 e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
000055 d0d2      	RCALL SUBOPT_0x2
000056 93ef      	PUSH R30
000057 e0a3      	LDI  R26,LOW(3)
000058 dfd3      	RCALL _read_adc
000059 91af      	POP  R26
00005a d0d0      	RCALL SUBOPT_0x3
                 ; 0000 0077 		Uint_CurrentSet_adc[Uchar_Sample_count] = read_adc(current_set);
00005b eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
00005c d0cb      	RCALL SUBOPT_0x2
00005d 93ef      	PUSH R30
00005e e0a7      	LDI  R26,LOW(7)
00005f dfcc      	RCALL _read_adc
000060 91af      	POP  R26
000061 93ed      	ST   X+,R30
000062 93fc      	ST   X,R31
                 ; 0000 0078 
                 ; 0000 0079 		Uchar_Sample_count++;
000063 9433      	INC  R3
                 ; 0000 007A 		if(Uchar_Sample_count >= num_sample)
000064 e0ea      	LDI  R30,LOW(10)
000065 163e      	CP   R3,R30
000066 f010      	BRLO _0xB
                 ; 0000 007B 		{
                 ; 0000 007C 			Uchar_Sample_count = 0;
000067 2433      	CLR  R3
                 ; 0000 007D 			Bit_AdcSample_full = 1;
000068 9a98      	SBI  0x13,0
                 ; 0000 007E 		}
                 ; 0000 007F 
                 ; 0000 0080 
                 ; 0000 0081 		if(Bit_AdcSample_full == 0)
                 _0xB:
000069 9998      	SBIC 0x13,0
00006a c03d      	RJMP _0xE
                 ; 0000 0082 		{
                 ; 0000 0083 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
00006b d0b9      	RCALL SUBOPT_0x1
                 _0x10:
00006c 81ac      	LDD  R26,Y+4
00006d 15a3      	CP   R26,R3
00006e f418      	BRSH _0x11
                 ; 0000 0084 			{
                 ; 0000 0085 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
00006f d0bf      	RCALL SUBOPT_0x4
                 ; 0000 0086 			}
000070 d0ca      	RCALL SUBOPT_0x5
000071 cffa      	RJMP _0x10
                 _0x11:
                 ; 0000 0087 			Uint_CurrentSet_value /= Uchar_loop_cnt;
000072 d0cc      	RCALL SUBOPT_0x6
000073 d0ce      	RCALL SUBOPT_0x7
000074 d0d0      	RCALL SUBOPT_0x8
                 ; 0000 0088 			if(Uint_CurrentSet_value >= 840)	Uint_CurrentSet_value = 840;
000075 f010      	BRLO _0x12
000076 d0d6      	RCALL SUBOPT_0x9
000077 d0d8      	RCALL SUBOPT_0xA
                 ; 0000 0089 			Uint_CurrentSet_value = (Uint_CurrentSet_value*10/840)*(CURRENT_SET_MAX - CURRENT_SET_MIN) + CURRENT_SET_MIN*10;
                 _0x12:
000078 d0da      	RCALL SUBOPT_0xB
000079 d0dc      	RCALL SUBOPT_0xC
00007a d0df      	RCALL SUBOPT_0xD
                 ; 0000 008A 
                 ; 0000 008B 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x14:
00007b 81ac      	LDD  R26,Y+4
00007c 15a3      	CP   R26,R3
00007d f418      	BRSH _0x15
                 ; 0000 008C 			{
                 ; 0000 008D 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
00007e d0e3      	RCALL SUBOPT_0xE
                 ; 0000 008E 			}
00007f d0bb      	RCALL SUBOPT_0x5
000080 cffa      	RJMP _0x14
                 _0x15:
                 ; 0000 008F 			Uint_Current_value /= Uchar_loop_cnt;
000081 d0bd      	RCALL SUBOPT_0x6
000082 d0eb      	RCALL SUBOPT_0xF
000083 d0ed      	RCALL SUBOPT_0x10
                 ; 0000 0090 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
000084 d0d1      	RCALL SUBOPT_0xC
000085 d0f2      	RCALL SUBOPT_0x11
                 ; 0000 0091 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
000086 f410      	BRSH _0x16
000087 e0e0      	LDI  R30,LOW(0)
000088 c052      	RJMP _0x2000001
                 ; 0000 0092 
                 ; 0000 0093 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x16:
000089 d09b      	RCALL SUBOPT_0x1
                 _0x18:
00008a 81ac      	LDD  R26,Y+4
00008b 15a3      	CP   R26,R3
00008c f418      	BRSH _0x19
                 ; 0000 0094 			{
                 ; 0000 0095 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
00008d d0f4      	RCALL SUBOPT_0x12
                 ; 0000 0096 			}
00008e d0ac      	RCALL SUBOPT_0x5
00008f cffa      	RJMP _0x18
                 _0x19:
                 ; 0000 0097 			Uint_Current_value /= Uchar_loop_cnt;
000090 d0ae      	RCALL SUBOPT_0x6
000091 d0dc      	RCALL SUBOPT_0xF
000092 d0de      	RCALL SUBOPT_0x10
                 ; 0000 0098 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
000093 d0c2      	RCALL SUBOPT_0xC
000094 d0e3      	RCALL SUBOPT_0x11
                 ; 0000 0099 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
000095 f410      	BRSH _0x1A
000096 e0e0      	LDI  R30,LOW(0)
000097 c043      	RJMP _0x2000001
                 ; 0000 009A 
                 ; 0000 009B 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt <= Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x1A:
000098 d08c      	RCALL SUBOPT_0x1
                 _0x1C:
000099 81ac      	LDD  R26,Y+4
00009a 163a      	CP   R3,R26
00009b f018      	BRLO _0x1D
                 ; 0000 009C 			{
                 ; 0000 009D 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
00009c d0f0      	RCALL SUBOPT_0x13
                 ; 0000 009E 			}
00009d d09d      	RCALL SUBOPT_0x5
00009e cffa      	RJMP _0x1C
                 _0x1D:
                 ; 0000 009F 			Uint_Current_value /= Uchar_loop_cnt;
00009f d09f      	RCALL SUBOPT_0x6
0000a0 d0cd      	RCALL SUBOPT_0xF
0000a1 d0cf      	RCALL SUBOPT_0x10
                 ; 0000 00A0 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000a2 d0b3      	RCALL SUBOPT_0xC
0000a3 d0d4      	RCALL SUBOPT_0x11
                 ; 0000 00A1 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000a4 f410      	BRSH _0x1E
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 c034      	RJMP _0x2000001
                 ; 0000 00A2         }
                 _0x1E:
                 ; 0000 00A3 		else
0000a7 c032      	RJMP _0x1F
                 _0xE:
                 ; 0000 00A4 		{
                 ; 0000 00A5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
0000a8 d07c      	RCALL SUBOPT_0x1
                 _0x21:
0000a9 d0ee      	RCALL SUBOPT_0x14
0000aa f418      	BRSH _0x22
                 ; 0000 00A6 			{
                 ; 0000 00A7 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
0000ab d083      	RCALL SUBOPT_0x4
                 ; 0000 00A8 			}
0000ac d08e      	RCALL SUBOPT_0x5
0000ad cffb      	RJMP _0x21
                 _0x22:
                 ; 0000 00A9 			Uint_CurrentSet_value /= num_sample;
0000ae d093      	RCALL SUBOPT_0x7
0000af d0eb      	RCALL SUBOPT_0x15
0000b0 d094      	RCALL SUBOPT_0x8
                 ; 0000 00AA 			if(Uint_CurrentSet_value >= 840)	Uint_CurrentSet_value = 840;
0000b1 f010      	BRLO _0x23
0000b2 d09a      	RCALL SUBOPT_0x9
0000b3 d09c      	RCALL SUBOPT_0xA
                 ; 0000 00AB 			Uint_CurrentSet_value = (Uint_CurrentSet_value*10/840)*(CURRENT_SET_MAX - CURRENT_SET_MIN) + CURRENT_SET_MIN*10;
                 _0x23:
0000b4 d09e      	RCALL SUBOPT_0xB
0000b5 d0a0      	RCALL SUBOPT_0xC
0000b6 d0a3      	RCALL SUBOPT_0xD
                 ; 0000 00AC 
                 ; 0000 00AD 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x25:
0000b7 d0e0      	RCALL SUBOPT_0x14
0000b8 f418      	BRSH _0x26
                 ; 0000 00AE 			{
                 ; 0000 00AF 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
0000b9 d0a8      	RCALL SUBOPT_0xE
                 ; 0000 00B0 			}
0000ba d080      	RCALL SUBOPT_0x5
0000bb cffb      	RJMP _0x25
                 _0x26:
                 ; 0000 00B1 			Uint_Current_value /=num_sample;
0000bc d0e1      	RCALL SUBOPT_0x16
                 ; 0000 00B2 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000bd d098      	RCALL SUBOPT_0xC
0000be d0b9      	RCALL SUBOPT_0x11
                 ; 0000 00B3 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000bf f410      	BRSH _0x27
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 c019      	RJMP _0x2000001
                 ; 0000 00B4 
                 ; 0000 00B5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x27:
0000c2 d062      	RCALL SUBOPT_0x1
                 _0x29:
0000c3 d0d4      	RCALL SUBOPT_0x14
0000c4 f418      	BRSH _0x2A
                 ; 0000 00B6 			{
                 ; 0000 00B7 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
0000c5 d0bc      	RCALL SUBOPT_0x12
                 ; 0000 00B8 			}
0000c6 d074      	RCALL SUBOPT_0x5
0000c7 cffb      	RJMP _0x29
                 _0x2A:
                 ; 0000 00B9 			Uint_Current_value /=num_sample;
0000c8 d0d5      	RCALL SUBOPT_0x16
                 ; 0000 00BA 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000c9 d08c      	RCALL SUBOPT_0xC
0000ca d0ad      	RCALL SUBOPT_0x11
                 ; 0000 00BB 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000cb f410      	BRSH _0x2B
0000cc e0e0      	LDI  R30,LOW(0)
0000cd c00d      	RJMP _0x2000001
                 ; 0000 00BC 
                 ; 0000 00BD 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x2B:
0000ce d056      	RCALL SUBOPT_0x1
                 _0x2D:
0000cf d0c8      	RCALL SUBOPT_0x14
0000d0 f418      	BRSH _0x2E
                 ; 0000 00BE 			{
                 ; 0000 00BF 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
0000d1 d0bb      	RCALL SUBOPT_0x13
                 ; 0000 00C0 			}
0000d2 d068      	RCALL SUBOPT_0x5
0000d3 cffb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00C1 			Uint_Current_value /= num_sample;
0000d4 d0c9      	RCALL SUBOPT_0x16
                 ; 0000 00C2 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000d5 d080      	RCALL SUBOPT_0xC
0000d6 d0a1      	RCALL SUBOPT_0x11
                 ; 0000 00C3 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000d7 f410      	BRSH _0x2F
0000d8 e0e0      	LDI  R30,LOW(0)
0000d9 c001      	RJMP _0x2000001
                 ; 0000 00C4 		}
                 _0x2F:
                 _0x1F:
                 ; 0000 00C5 		return Ok;
0000da e0e1      	LDI  R30,LOW(1)
                 _0x2000001:
0000db 9625      	ADIW R28,5
0000dc 9508      	RET
                 ; 0000 00C6 	}
0000dd 9625      	ADIW R28,5
                 ; 0000 00C7 	return Processing;
                 _0x8:
0000de e0e2      	LDI  R30,LOW(2)
0000df 9508      	RET
                 ; 0000 00C8 }
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;*	Dieu khien cac tin hieu canh bao dua vao trang thai cac co canh bao
                 ;*/
                 ;void	Protect_control(void)
                 ; 0000 00CF {
                 _Protect_control:
                 ; .FSTART _Protect_control
                 ; 0000 00D0 	unsigned char	Uchar_respone = Processing;
                 ; 0000 00D1 	Uchar_respone = Current_get_value();
0000e0 931a      	ST   -Y,R17
                 ;	Uchar_respone -> R17
0000e1 e012      	LDI  R17,2
0000e2 df58      	RCALL _Current_get_value
0000e3 2f1e      	MOV  R17,R30
                 ; 0000 00D2 	if(Uchar_respone == Err)
0000e4 3010      	CPI  R17,0
0000e5 f419      	BRNE _0x30
                 ; 0000 00D3 	{
                 ; 0000 00D4 		BUZZER_ON;
0000e6 9ac0      	SBI  0x18,0
                 ; 0000 00D5 		RELAY_ON;
0000e7 9ac1      	SBI  0x18,1
                 ; 0000 00D6 	}
                 ; 0000 00D7 	else if(Uchar_respone == Ok)
0000e8 c004      	RJMP _0x35
                 _0x30:
0000e9 3011      	CPI  R17,1
0000ea f411      	BRNE _0x36
                 ; 0000 00D8 	{
                 ; 0000 00D9 		BUZZER_OFF;
0000eb 98c0      	CBI  0x18,0
                 ; 0000 00DA 		RELAY_OFF;
0000ec 98c1      	CBI  0x18,1
                 ; 0000 00DB 	}
                 ; 0000 00DC }
                 _0x36:
                 _0x35:
0000ed 9119      	LD   R17,Y+
0000ee 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00DF {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E0 // Declare your local variables here
                 ; 0000 00E1 // Crystal Oscillator division factor: 1
                 ; 0000 00E2 #pragma optsize-
                 ; 0000 00E3 CLKPR=(1<<CLKPCE);
0000ef e8e0      	LDI  R30,LOW(128)
0000f0 bde6      	OUT  0x26,R30
                 ; 0000 00E4 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 bde6      	OUT  0x26,R30
                 ; 0000 00E5 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00E6 #pragma optsize+
                 ; 0000 00E7 #endif
                 ; 0000 00E8 // Input/Output Ports initialization
                 ; 0000 00E9 // Port A initialization
                 ; 0000 00EA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00EB DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000f3 bbea      	OUT  0x1A,R30
                 ; 0000 00EC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00ED PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000f4 bbeb      	OUT  0x1B,R30
                 ; 0000 00EE 
                 ; 0000 00EF // Port B initialization
                 ; 0000 00F0 // Function: Bit3=Out Bit2=In Bit1=Out Bit0=Out
                 ; 0000 00F1 DDRB=(1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000f5 e0ef      	LDI  R30,LOW(15)
0000f6 bbe7      	OUT  0x17,R30
                 ; 0000 00F2 // State: Bit3=0 Bit2=T Bit1=0 Bit0=0
                 ; 0000 00F3 PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000f7 e0e0      	LDI  R30,LOW(0)
0000f8 bbe8      	OUT  0x18,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Timer/Counter 0 initialization
                 ; 0000 00F6 // Clock source: System Clock
                 ; 0000 00F7 // Clock value: Timer 0 Stopped
                 ; 0000 00F8 // Mode: Normal top=0xFF
                 ; 0000 00F9 // OC0A output: Disconnected
                 ; 0000 00FA // OC0B output: Disconnected
                 ; 0000 00FB TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000f9 bfe0      	OUT  0x30,R30
                 ; 0000 00FC TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000fa bfe3      	OUT  0x33,R30
                 ; 0000 00FD TCNT0=0x00;
0000fb bfe2      	OUT  0x32,R30
                 ; 0000 00FE OCR0A=0x00;
0000fc bfe6      	OUT  0x36,R30
                 ; 0000 00FF OCR0B=0x00;
0000fd bfec      	OUT  0x3C,R30
                 ; 0000 0100 
                 ; 0000 0101 // Timer/Counter 1 initialization
                 ; 0000 0102 // Clock source: System Clock
                 ; 0000 0103 // Clock value: 125,000 kHz
                 ; 0000 0104 // Mode: Normal top=0xFFFF
                 ; 0000 0105 // OC1A output: Disconnected
                 ; 0000 0106 // OC1B output: Disconnected
                 ; 0000 0107 // Noise Canceler: Off
                 ; 0000 0108 // Input Capture on Falling Edge
                 ; 0000 0109 // Timer Period: 0,1 s
                 ; 0000 010A // Timer1 Overflow Interrupt: On
                 ; 0000 010B // Input Capture Interrupt: Off
                 ; 0000 010C // Compare A Match Interrupt: Off
                 ; 0000 010D // Compare B Match Interrupt: Off
                 ; 0000 010E TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000fe bdef      	OUT  0x2F,R30
                 ; 0000 010F TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000ff e0e3      	LDI  R30,LOW(3)
000100 bdee      	OUT  0x2E,R30
                 ; 0000 0110 TCNT1H=0xCF;
000101 d01e      	RCALL SUBOPT_0x0
                 ; 0000 0111 TCNT1L=0x2C;
                 ; 0000 0112 ICR1H=0x00;
000102 e0e0      	LDI  R30,LOW(0)
000103 bde5      	OUT  0x25,R30
                 ; 0000 0113 ICR1L=0x00;
000104 bde4      	OUT  0x24,R30
                 ; 0000 0114 OCR1AH=0x00;
000105 bdeb      	OUT  0x2B,R30
                 ; 0000 0115 OCR1AL=0x00;
000106 bdea      	OUT  0x2A,R30
                 ; 0000 0116 OCR1BH=0x00;
000107 bde9      	OUT  0x29,R30
                 ; 0000 0117 OCR1BL=0x00;
000108 bde8      	OUT  0x28,R30
                 ; 0000 0118 // // Timer/Counter 1 initialization
                 ; 0000 0119 // // Clock source: System Clock
                 ; 0000 011A // // Clock value: 31.250 kHz
                 ; 0000 011B // // Mode: Normal top=0xFFFF
                 ; 0000 011C // // OC1A output: Disconnected
                 ; 0000 011D // // OC1B output: Disconnected
                 ; 0000 011E // // Noise Canceler: Off
                 ; 0000 011F // // Input Capture on Falling Edge
                 ; 0000 0120 // // Timer Period: 1 s
                 ; 0000 0121 // // Timer1 Overflow Interrupt: On
                 ; 0000 0122 // // Input Capture Interrupt: Off
                 ; 0000 0123 // // Compare A Match Interrupt: Off
                 ; 0000 0124 // // Compare B Match Interrupt: Off
                 ; 0000 0125 // TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
                 ; 0000 0126 // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
                 ; 0000 0127 // TCNT1H=0x85;
                 ; 0000 0128 // TCNT1L=0xEE;
                 ; 0000 0129 // ICR1H=0x00;
                 ; 0000 012A // ICR1L=0x00;
                 ; 0000 012B // OCR1AH=0x00;
                 ; 0000 012C // OCR1AL=0x00;
                 ; 0000 012D // OCR1BH=0x00;
                 ; 0000 012E // OCR1BL=0x00;
                 ; 0000 012F // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0130 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000109 bfe9      	OUT  0x39,R30
                 ; 0000 0131 
                 ; 0000 0132 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 0133 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
00010a e0e1      	LDI  R30,LOW(1)
00010b b9ec      	OUT  0xC,R30
                 ; 0000 0134 
                 ; 0000 0135 // External Interrupt(s) initialization
                 ; 0000 0136 // INT0: Off
                 ; 0000 0137 // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0138 // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 0139 MCUCR=(0<<ISC01) | (0<<ISC00);
00010c e0e0      	LDI  R30,LOW(0)
00010d bfe5      	OUT  0x35,R30
                 ; 0000 013A GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
00010e bfeb      	OUT  0x3B,R30
                 ; 0000 013B 
                 ; 0000 013C // USI initialization
                 ; 0000 013D // Mode: Disabled
                 ; 0000 013E // Clock source: Register & Counter=no clk.
                 ; 0000 013F // USI Counter Overflow Interrupt: Off
                 ; 0000 0140 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
00010f b9ed      	OUT  0xD,R30
                 ; 0000 0141 
                 ; 0000 0142 // Analog Comparator initialization
                 ; 0000 0143 // Analog Comparator: Off
                 ; 0000 0144 // The Analog Comparator's positive input is
                 ; 0000 0145 // connected to the AIN0 pin
                 ; 0000 0146 // The Analog Comparator's negative input is
                 ; 0000 0147 // connected to the AIN1 pin
                 ; 0000 0148 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000110 e8e0      	LDI  R30,LOW(128)
000111 b9e8      	OUT  0x8,R30
                 ; 0000 0149 // Digital input buffer on AIN0: On
                 ; 0000 014A // Digital input buffer on AIN1: On
                 ; 0000 014B DIDR0=(0<<ADC1D) | (0<<ADC2D);
000112 e0e0      	LDI  R30,LOW(0)
000113 b9e1      	OUT  0x1,R30
                 ; 0000 014C 
                 ; 0000 014D 
                 ; 0000 014E // ADC initialization
                 ; 0000 014F // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0150 // ADC Voltage Reference: AVCC pin
                 ; 0000 0151 // ADC Bipolar Input Mode: Off
                 ; 0000 0152 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0153 // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 0154 // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 0155 DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
000114 e8ee      	LDI  R30,LOW(142)
000115 b9e1      	OUT  0x1,R30
                 ; 0000 0156 ADMUX=ADC_VREF_TYPE;
000116 e0e0      	LDI  R30,LOW(0)
000117 b9e7      	OUT  0x7,R30
                 ; 0000 0157 ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000118 e8e3      	LDI  R30,LOW(131)
000119 b9e6      	OUT  0x6,R30
                 ; 0000 0158 ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
00011a e0e0      	LDI  R30,LOW(0)
00011b b9e3      	OUT  0x3,R30
                 ; 0000 0159 
                 ; 0000 015A 
                 ; 0000 015B // Watchdog Timer initialization
                 ; 0000 015C // Watchdog Timer Prescaler: OSC/2k
                 ; 0000 015D // Watchdog timeout action: Reset
                 ; 0000 015E //#pragma optsize-
                 ; 0000 015F //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
                 ; 0000 0160 //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
                 ; 0000 0161 //#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0162 //#pragma optsize+
                 ; 0000 0163 //#endif
                 ; 0000 0164 
                 ; 0000 0165 // Global enable interrupts
                 ; 0000 0166 #asm("sei")
00011c 9478      	sei
                 ; 0000 0167 	while (1)
                 _0x3B:
                 ; 0000 0168 	{
                 ; 0000 0169 		Protect_control();
00011d dfc2      	RCALL _Protect_control
                 ; 0000 016A 	}
00011e cffe      	RJMP _0x3B
                 ; 0000 016B }
                 _0x3E:
00011f cfff      	RJMP _0x3E
                 ; .FEND
                 
                 	.DSEG
                 _Uint_Current1_adc:
000068           	.BYTE 0x14
                 _Uint_Current2_adc:
00007c           	.BYTE 0x14
                 _Uint_Current3_adc:
000090           	.BYTE 0x14
                 _Uint_CurrentSet_adc:
0000a4           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000120 ecef      	LDI  R30,LOW(207)
000121 bded      	OUT  0x2D,R30
000122 e2ec      	LDI  R30,LOW(44)
000123 bdec      	OUT  0x2C,R30
000124 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000125 e0e0      	LDI  R30,LOW(0)
000126 83ec      	STD  Y+4,R30
000127 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000128 0fee      	LSL  R30
000129 0fea      	ADD  R30,R26
00012a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00012b 93ed      	ST   X+,R30
00012c 93fc      	ST   X,R31
00012d 2de3      	MOV  R30,R3
00012e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00012f 81ec      	LDD  R30,Y+4
000130 eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
000131 0fee      	LSL  R30
000132 0fae      	ADD  R26,R30
000133 d09c      	RCALL __GETW1P
000134 81a8      	LD   R26,Y
000135 81b9      	LDD  R27,Y+1
000136 0fea      	ADD  R30,R26
000137 1ffb      	ADC  R31,R27
000138 83e8      	ST   Y,R30
000139 83f9      	STD  Y+1,R31
00013a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
00013b 81ec      	LDD  R30,Y+4
00013c 5fef      	SUBI R30,-LOW(1)
00013d 83ec      	STD  Y+4,R30
00013e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00013f 81ec      	LDD  R30,Y+4
000140 e0f0      	LDI  R31,0
000141 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
000142 81a8      	LD   R26,Y
000143 81b9      	LDD  R27,Y+1
000144 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000145 d077      	RCALL __DIVW21U
000146 83e8      	ST   Y,R30
000147 83f9      	STD  Y+1,R31
000148 dff9      	RCALL SUBOPT_0x7
000149 34a8      	CPI  R26,LOW(0x348)
00014a e0e3      	LDI  R30,HIGH(0x348)
00014b 07be      	CPC  R27,R30
00014c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
00014d e4e8      	LDI  R30,LOW(840)
00014e e0f3      	LDI  R31,HIGH(840)
00014f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000150 83e8      	ST   Y,R30
000151 83f9      	STD  Y+1,R31
000152 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
000153 81e8      	LD   R30,Y
000154 81f9      	LDD  R31,Y+1
000155 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 14 TIMES, CODE SIZE REDUCTION:24 WORDS
                 SUBOPT_0xC:
000156 e0aa      	LDI  R26,LOW(10)
000157 e0b0      	LDI  R27,HIGH(10)
000158 d054      	RCALL __MULW12U
000159 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
00015a 01df      	MOVW R26,R30
00015b dff1      	RCALL SUBOPT_0x9
00015c d060      	RCALL __DIVW21U
00015d d043      	RCALL __LSLW3
00015e 5be0      	SUBI R30,LOW(-80)
00015f 4fff      	SBCI R31,HIGH(-80)
000160 dfef      	RCALL SUBOPT_0xA
000161 cfc3      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xE:
000162 81ec      	LDD  R30,Y+4
000163 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
000164 0fee      	LSL  R30
000165 0fae      	ADD  R26,R30
000166 d069      	RCALL __GETW1P
000167 81aa      	LDD  R26,Y+2
000168 81bb      	LDD  R27,Y+2+1
000169 0fea      	ADD  R30,R26
00016a 1ffb      	ADC  R31,R27
00016b 83ea      	STD  Y+2,R30
00016c 83fb      	STD  Y+2+1,R31
00016d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
00016e 81aa      	LDD  R26,Y+2
00016f 81bb      	LDD  R27,Y+2+1
000170 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x10:
000171 d04b      	RCALL __DIVW21U
000172 83ea      	STD  Y+2,R30
000173 83fb      	STD  Y+2+1,R31
000174 e0a5      	LDI  R26,LOW(5)
000175 e0b0      	LDI  R27,HIGH(5)
000176 d036      	RCALL __MULW12U
000177 cfde      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x11:
000178 d02f      	RCALL __LSRW2
000179 2fef      	MOV  R30,R31
00017a e0f0      	LDI  R31,0
00017b 83ea      	STD  Y+2,R30
00017c 83fb      	STD  Y+2+1,R31
00017d dfd5      	RCALL SUBOPT_0xB
00017e dfef      	RCALL SUBOPT_0xF
00017f 17ea      	CP   R30,R26
000180 07fb      	CPC  R31,R27
000181 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
000182 81ec      	LDD  R30,Y+4
000183 e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
000184 0fee      	LSL  R30
000185 0fae      	ADD  R26,R30
000186 d049      	RCALL __GETW1P
000187 dfe6      	RCALL SUBOPT_0xF
000188 0fea      	ADD  R30,R26
000189 1ffb      	ADC  R31,R27
00018a 83ea      	STD  Y+2,R30
00018b 83fb      	STD  Y+2+1,R31
00018c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
00018d 81ec      	LDD  R30,Y+4
00018e e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
00018f 0fee      	LSL  R30
000190 0fae      	ADD  R26,R30
000191 d03e      	RCALL __GETW1P
000192 dfdb      	RCALL SUBOPT_0xF
000193 0fea      	ADD  R30,R26
000194 1ffb      	ADC  R31,R27
000195 83ea      	STD  Y+2,R30
000196 83fb      	STD  Y+2+1,R31
000197 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
000198 81ac      	LDD  R26,Y+4
000199 30aa      	CPI  R26,LOW(0xA)
00019a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
00019b e0ea      	LDI  R30,LOW(10)
00019c e0f0      	LDI  R31,HIGH(10)
00019d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
00019e dfcf      	RCALL SUBOPT_0xF
00019f dffb      	RCALL SUBOPT_0x15
0001a0 cfd0      	RJMP SUBOPT_0x10
                 
                 
                 	.CSEG
                 __LSLW3:
0001a1 0fee      	LSL  R30
0001a2 1fff      	ROL  R31
                 __LSLW2:
0001a3 0fee      	LSL  R30
0001a4 1fff      	ROL  R31
0001a5 0fee      	LSL  R30
0001a6 1fff      	ROL  R31
0001a7 9508      	RET
                 
                 __LSRW2:
0001a8 95f6      	LSR  R31
0001a9 95e7      	ROR  R30
0001aa 95f6      	LSR  R31
0001ab 95e7      	ROR  R30
0001ac 9508      	RET
                 
                 __MULW12U:
0001ad 2e0a      	MOV  R0,R26
0001ae 2e1b      	MOV  R1,R27
0001af e181      	LDI  R24,17
0001b0 27aa      	CLR  R26
0001b1 1bbb      	SUB  R27,R27
0001b2 c005      	RJMP __MULW12U1
                 __MULW12U3:
0001b3 f410      	BRCC __MULW12U2
0001b4 0da0      	ADD  R26,R0
0001b5 1db1      	ADC  R27,R1
                 __MULW12U2:
0001b6 95b6      	LSR  R27
0001b7 95a7      	ROR  R26
                 __MULW12U1:
0001b8 95f7      	ROR  R31
0001b9 95e7      	ROR  R30
0001ba 958a      	DEC  R24
0001bb f7b9      	BRNE __MULW12U3
0001bc 9508      	RET
                 
                 __DIVW21U:
0001bd 2400      	CLR  R0
0001be 2411      	CLR  R1
0001bf e190      	LDI  R25,16
                 __DIVW21U1:
0001c0 0faa      	LSL  R26
0001c1 1fbb      	ROL  R27
0001c2 1c00      	ROL  R0
0001c3 1c11      	ROL  R1
0001c4 1a0e      	SUB  R0,R30
0001c5 0a1f      	SBC  R1,R31
0001c6 f418      	BRCC __DIVW21U2
0001c7 0e0e      	ADD  R0,R30
0001c8 1e1f      	ADC  R1,R31
0001c9 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ca 60a1      	SBR  R26,1
                 __DIVW21U3:
0001cb 959a      	DEC  R25
0001cc f799      	BRNE __DIVW21U1
0001cd 01fd      	MOVW R30,R26
0001ce 01d0      	MOVW R26,R0
0001cf 9508      	RET
                 
                 __GETW1P:
0001d0 91ed      	LD   R30,X+
0001d1 91fc      	LD   R31,X
0001d2 95aa      	DEC  R26
0001d3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24A register use summary:
r0 :   7 r1 :   6 r2 :   0 r3 :   9 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   6 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   8 r25:   2 r26:  56 r27:  18 r28:   5 r29:   0 r30: 140 r31:  32 
x  :   8 y  :  49 z  :   0 
Registers used: 13 out of 35 (37.1%)

ATtiny24A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  11 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   2 brcs  :   0 break :   0 breq  :   0 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   4 
brlt  :   0 brmi  :   0 brne  :   7 brpl  :   0 brsh  :  13 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   3 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   5 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :   2 cpi   :   4 cpse  :   0 dec   :   6 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   1 ld    :   8 ldd   :  18 ldi   :  61 lds   :   0 lpm   :   0 
lsl   :   9 lsr   :   3 mov   :   6 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :   4 push  :   4 rcall : 102 ret   :  29 reti  :   1 rjmp  :  44 
rol   :   6 ror   :   5 sbc   :   1 sbci  :   1 sbi   :   6 sbic  :   1 
sbis  :   2 sbiw  :   1 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :  18 
sts   :   0 sub   :   2 subi  :   2 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 45 out of 114 (39.5%)

ATtiny24A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003a8    936      0    936    2048  45.7%
[.dseg] 0x000060 0x0000b8      0     80     80     128  62.5%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 1 warnings
