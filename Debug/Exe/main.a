;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : 3 Phase curent protect
;Version : 1.0
;Date    : 05/11/2018
;Author  :
;Company :
;Comments:
;Doc dien ap tu 3 pha, so sanh voi dien ap cai dat.
;Dieu khien ngat dong dau vao khi dong tieu thu lon hon dong cai dat
;
;
;Chip type               : ATtiny24
;AVR Core Clock frequency: 8,000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 8
;*******************************************************/
;
;#include <tiny24.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x18
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x18
;PCODE: $00000007 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000008 VOL: 0
	#endif
;PCODE: $00000009 VOL: 0
;PCODE: $0000000A VOL: 0
;
;#include <delay.h>
;
;#define	current_1	1
;#define	current_2	2
;#define	current_3	3
;#define	current_set	7
;
;#define	num_sample	10
;
;#define	current_1_scale	1
;#define	current_2_scale	1
;#define	current_3_scale	1
;#define	current_set_scale	1
;//#define	v_num_noise_filter	3
;
;unsigned int	v_current_value = 0;
;unsigned int	v_current_set_value = 0;
;
;unsigned int	v_adc_current_1[num_sample];
;unsigned int	v_adc_current_2[num_sample];
;unsigned int	v_adc_current_3[num_sample];
;unsigned int	v_adc_current_set[num_sample];
;unsigned char	v_num_sample_cnt;
;
;bit	f_current_1_hight = 0;
;bit	f_current_2_hight = 0;
;bit	f_current_3_hight = 0;
;
;bit	f_adc_get_sample = 0;
;
;bit	f_timer_overflow = 0;
;
;#define	BUZZER_ON	PORTB |= 0x02
;#define	BUZZER_OFF	PORTB &= 0xFD
;
;// Declare your global variables here
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0042 {

	.CSEG
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
; 0000 0043 // Reinitialize Timer1 value
; 0000 0044 TCNT1H=0xCF2C >> 8;
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0045 TCNT1L=0xCF2C & 0xff;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0046 f_timer_overflow = 1;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0047 
; 0000 0048 // Place your code here
; 0000 0049 
; 0000 004A }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;
;
;// Voltage Reference: AVCC pin
;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0053 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0054 ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
;PCODE: $00000018 VOL: 0
;	adc_input -> Y+0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0055 // Delay needed for the stabilization of the ADC input voltage
; 0000 0056 delay_us(10);
;PCODE: $0000001D VOL: 0
; 0000 0057 // Start the AD conversion
; 0000 0058 ADCSRA|=(1<<ADSC);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0059 // Wait for the AD conversion to complete
; 0000 005A while ((ADCSRA & (1<<ADIF))==0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005B ADCSRA|=(1<<ADIF);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 005C return ADCW;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 005D }
;PCODE: $0000002B VOL: 0
;
;void	Current_get_value(void)
; 0000 0060 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0061 	unsigned char	cnt_loop = 0;
; 0000 0062 
; 0000 0063 	v_adc_current_1[v_num_sample_cnt] = read_adc(current_1);
;PCODE: $0000002E VOL: 0
;	cnt_loop -> R17
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0064 	v_adc_current_2[v_num_sample_cnt] = read_adc(current_2);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0065 	v_adc_current_3[v_num_sample_cnt] = read_adc(current_3);
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0066 	v_adc_current_set[v_num_sample_cnt] = read_adc(current_set);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0067 
; 0000 0068 	if((v_num_sample_cnt < (num_sample-1)) && (f_adc_get_sample == 0))
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0069     {
; 0000 006A         for(cnt_loop = 0; cnt_loop <= v_num_sample_cnt; cnt_loop++)
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 006B 		{
; 0000 006C 			v_current_set_value += v_adc_current_set[cnt_loop];
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 006D 		}
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 006E 		v_current_set_value /= cnt_loop;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006F 
; 0000 0070 		for(cnt_loop = 0; cnt_loop <= v_num_sample_cnt; cnt_loop++)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0071 		{
; 0000 0072 			v_current_value += v_adc_current_1[cnt_loop];
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0073 		}
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 0074 		v_current_value /= cnt_loop;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0075         if(v_current_value*current_1_scale > v_current_set_value*current_set_scale)	f_current_1_hight = 1;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0076 		else	f_current_1_hight = 0;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 0077 
; 0000 0078 		for(cnt_loop = 0; cnt_loop <= v_num_sample_cnt; cnt_loop++)
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 0079 		{
; 0000 007A 			v_current_value += v_adc_current_2[cnt_loop];
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 007B 		}
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 007C 		v_current_value /= cnt_loop;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 007D         if(v_current_value*current_2_scale > v_current_set_value*current_set_scale)	f_current_2_hight = 1;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 007E 		else	f_current_2_hight = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 007F 
; 0000 0080 		for(cnt_loop = 0; cnt_loop <= v_num_sample_cnt; cnt_loop++)
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 0081 		{
; 0000 0082 			v_current_value += v_adc_current_3[cnt_loop];
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0083 		}
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 0084 		v_current_value /= cnt_loop;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 0085         if(v_current_value*current_3_scale > v_current_set_value*current_set_scale)	f_current_3_hight = 1;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0086 		else	f_current_3_hight = 0;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0087     }
;PCODE: $000000E4 VOL: 0
; 0000 0088     else
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0089     {
; 0000 008A 		f_adc_get_sample = 1;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 008B 		for(cnt_loop = 0; cnt_loop < num_sample; cnt_loop++)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 008C 		{
; 0000 008D 			v_current_set_value += v_adc_current_set[cnt_loop];
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 008E 		}
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 008F 		v_current_set_value /= num_sample;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0090 
; 0000 0091 		for(cnt_loop = 0; cnt_loop < num_sample; cnt_loop++)
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0092 		{
; 0000 0093 			v_current_value += v_adc_current_1[cnt_loop];
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0094 		}
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0095 		v_current_value /=num_sample;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 0096         if(v_current_value*current_1_scale > v_current_set_value*current_set_scale)	f_current_1_hight = 1;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 0097 		else	f_current_1_hight = 0;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 0098 
; 0000 0099 		for(cnt_loop = 0; cnt_loop < num_sample; cnt_loop++)
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 009A 		{
; 0000 009B 			v_current_value += v_adc_current_2[cnt_loop];
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 009C 		}
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 009D 		v_current_value /=num_sample;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 009E         if(v_current_value*current_2_scale > v_current_set_value*current_set_scale)	f_current_2_hight = 1;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 009F 		else	f_current_2_hight = 0;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00A0 
; 0000 00A1 		for(cnt_loop = 0; cnt_loop < num_sample; cnt_loop++)
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 00A2 		{
; 0000 00A3 			v_current_value += v_adc_current_3[cnt_loop];
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 00A4 		}
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 00A5 		v_current_value /= num_sample;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 00A6         if(v_current_value*current_3_scale > v_current_set_value*current_set_scale)	f_current_3_hight = 1;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0000 00A7 		else	f_current_3_hight = 0;
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 00A8     }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 00A9 
; 0000 00AA     v_num_sample_cnt++;
;PCODE: $0000016C VOL: 0
; 0000 00AB 	if(v_num_sample_cnt >= num_sample)	v_num_sample_cnt = 0;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 00AC }
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;
;void	Protect_control(void)
; 0000 00AF {
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 00B0 	if(f_current_1_hight || f_current_2_hight || f_current_3_hight)
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 00B1 	{
; 0000 00B2 		BUZZER_ON;
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 00B3 	}
; 0000 00B4 	else
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00B5 	{
; 0000 00B6 		BUZZER_OFF;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 00B7 	}
;PCODE: $00000188 VOL: 0
; 0000 00B8 }
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;
;void main(void)
; 0000 00BB {
;PCODE: $0000018B VOL: 0
; 0000 00BC // Declare your local variables here
; 0000 00BD 
; 0000 00BE // Crystal Oscillator division factor: 1
; 0000 00BF #pragma optsize-
; 0000 00C0 CLKPR=(1<<CLKPCE);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 00C1 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
; 0000 00C2 #ifdef _OPTIMIZE_SIZE_
; 0000 00C3 #pragma optsize+
; 0000 00C4 #endif
; 0000 00C5 
; 0000 00C6 //// Reset Source checking
; 0000 00C7 //if (MCUSR & (1<<PORF))
; 0000 00C8 //   {
; 0000 00C9 //   // Power-on Reset
; 0000 00CA //   MCUSR=0;
; 0000 00CB //   // Place your code here
; 0000 00CC //
; 0000 00CD //   }
; 0000 00CE //else if (MCUSR & (1<<EXTRF))
; 0000 00CF //   {
; 0000 00D0 //   // External Reset
; 0000 00D1 //   MCUSR=0;
; 0000 00D2 //   // Place your code here
; 0000 00D3 //
; 0000 00D4 //   }
; 0000 00D5 //else if (MCUSR & (1<<BORF))
; 0000 00D6 //   {
; 0000 00D7 //   // Brown-Out Reset
; 0000 00D8 //   MCUSR=0;
; 0000 00D9 //   // Place your code here
; 0000 00DA //
; 0000 00DB //   }
; 0000 00DC //else
; 0000 00DD //   {
; 0000 00DE //   // Watchdog Reset
; 0000 00DF //   MCUSR=0;
; 0000 00E0 //   // Place your code here
; 0000 00E1 //
; 0000 00E2 //   }
; 0000 00E3 
; 0000 00E4 // Input/Output Ports initialization
; 0000 00E5 // Port A initialization
; 0000 00E6 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 00E7 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 00E8 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 00E9 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
; 0000 00EA 
; 0000 00EB // Port B initialization
; 0000 00EC // Function: Bit3=Out Bit2=In Bit1=Out Bit0=Out
; 0000 00ED DDRB=(1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 00EE // State: Bit3=0 Bit2=T Bit1=0 Bit0=0
; 0000 00EF PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
; 0000 00F0 
; 0000 00F1 // Timer/Counter 0 initialization
; 0000 00F2 // Clock source: System Clock
; 0000 00F3 // Clock value: Timer 0 Stopped
; 0000 00F4 // Mode: Normal top=0xFF
; 0000 00F5 // OC0A output: Disconnected
; 0000 00F6 // OC0B output: Disconnected
; 0000 00F7 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00F8 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
; 0000 00F9 TCNT0=0x00;
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
; 0000 00FA OCR0A=0x00;
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 00FB OCR0B=0x00;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
; 0000 00FC 
; 0000 00FD // Timer/Counter 1 initialization
; 0000 00FE // Clock source: System Clock
; 0000 00FF // Clock value: 125,000 kHz
; 0000 0100 // Mode: Normal top=0xFFFF
; 0000 0101 // OC1A output: Disconnected
; 0000 0102 // OC1B output: Disconnected
; 0000 0103 // Noise Canceler: Off
; 0000 0104 // Input Capture on Falling Edge
; 0000 0105 // Timer Period: 0,1 s
; 0000 0106 // Timer1 Overflow Interrupt: On
; 0000 0107 // Input Capture Interrupt: Off
; 0000 0108 // Compare A Match Interrupt: Off
; 0000 0109 // Compare B Match Interrupt: Off
; 0000 010A TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 010B TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 010C TCNT1H=0xCF;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 010D TCNT1L=0x2C;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 010E ICR1H=0x00;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 010F ICR1L=0x00;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0110 OCR1AH=0x00;
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
; 0000 0111 OCR1AL=0x00;
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0112 OCR1BH=0x00;
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0113 OCR1BL=0x00;
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
; 0000 0114 
; 0000 0115 // Timer/Counter 0 Interrupt(s) initialization
; 0000 0116 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0117 
; 0000 0118 // Timer/Counter 1 Interrupt(s) initialization
; 0000 0119 TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 011A 
; 0000 011B // External Interrupt(s) initialization
; 0000 011C // INT0: Off
; 0000 011D // Interrupt on any change on pins PCINT0-7: Off
; 0000 011E // Interrupt on any change on pins PCINT8-11: Off
; 0000 011F MCUCR=(0<<ISC01) | (0<<ISC00);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0120 GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 0121 
; 0000 0122 // USI initialization
; 0000 0123 // Mode: Disabled
; 0000 0124 // Clock source: Register & Counter=no clk.
; 0000 0125 // USI Counter Overflow Interrupt: Off
; 0000 0126 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0127 
; 0000 0128 // Analog Comparator initialization
; 0000 0129 // Analog Comparator: Off
; 0000 012A // The Analog Comparator's positive input is
; 0000 012B // connected to the AIN0 pin
; 0000 012C // The Analog Comparator's negative input is
; 0000 012D // connected to the AIN1 pin
; 0000 012E ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 012F // Digital input buffer on AIN0: On
; 0000 0130 // Digital input buffer on AIN1: On
; 0000 0131 DIDR0=(0<<ADC1D) | (0<<ADC2D);
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 0132 
; 0000 0133 // ADC initialization
; 0000 0134 // ADC Clock frequency: 1000,000 kHz
; 0000 0135 // ADC Voltage Reference: AVCC pin
; 0000 0136 // ADC Bipolar Input Mode: Off
; 0000 0137 // ADC Auto Trigger Source: Free Running
; 0000 0138 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
; 0000 0139 // ADC4: Off, ADC5: Off, ADC6: Off, ADC7: On
; 0000 013A DIDR0=(0<<ADC7D) | (1<<ADC6D) | (1<<ADC5D) | (1<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 013B ADMUX=ADC_VREF_TYPE;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 013C ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 013D ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 013E 
; 0000 013F 
; 0000 0140 // Watchdog Timer initialization
; 0000 0141 // Watchdog Timer Prescaler: OSC/2k
; 0000 0142 // Watchdog timeout action: Reset
; 0000 0143 #pragma optsize-
; 0000 0144 WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0145 WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 0146 #ifdef _OPTIMIZE_SIZE_
; 0000 0147 #pragma optsize+
; 0000 0148 #endif
; 0000 0149 
; 0000 014A // Global enable interrupts
; 0000 014B #asm("sei")
;PCODE: $000001D0 VOL: 0
	sei
;PCODE: $000001D1 VOL: 0
; 0000 014C 
; 0000 014D 	while (1)
;PCODE: $000001D2 VOL: 0
; 0000 014E 	{
; 0000 014F 		// Place your code here
; 0000 0150 		if(f_timer_overflow)
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0151 		{
; 0000 0152 			Current_get_value();
;PCODE: $000001D6 VOL: 0
; 0000 0153 			f_timer_overflow = 0;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0154 		}
; 0000 0155 		Protect_control();
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0156 	}
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0157 }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
