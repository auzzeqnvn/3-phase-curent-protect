
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-curent-protect\Debug\List\3 phase current protect.asm Wed Nov 07 15:20:16 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-curent-protect\Debug\List\3 phase current protect.asm(987): warning: Register r3 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 8 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0008
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uchar_Sample_count=R3
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c01e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000017 93ed      	ST   X+,R30
000018 958a      	DEC  R24
000019 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00001b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00001f e0e0      	LDI  R30,__GPIOR0_INIT
000020 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000021 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000022 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000023 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000024 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000025 e6c8      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000026 c0ae      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x68
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase curent protect
                 ;Version : 1.0
                 ;Date    : 05/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Doc dien ap tu 3 pha, so sanh voi dien ap cai dat.
                 ;Dieu khien ngat dong dau vao khi dong tieu thu lon hon dong cai dat
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 8
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#define	current_1	1
                 ;#define	current_2	2
                 ;#define	current_3	3
                 ;#define	current_set	7
                 ;
                 ;#define	num_sample	10
                 ;
                 ;#define	current_1_scale	1
                 ;#define	current_2_scale	1
                 ;#define	current_3_scale	1
                 ;#define	current_set_scale	1
                 ;
                 ;//#define	v_num_noise_filter	3
                 ;
                 ;#define	DO_CONTROL_BUZZER	PORTB.2
                 ;
                 ;#define	BUZZER_ON	DO_CONTROL_BUZZER = 1
                 ;#define	BUZZER_OFF	DO_CONTROL_BUZZER = 0
                 ;
                 ;#define	Err	0
                 ;#define	Ok	1
                 ;#define	Processing	2
                 ;
                 ;unsigned int	Uint_Current1_adc[num_sample];
                 ;unsigned int	Uint_Current2_adc[num_sample];
                 ;unsigned int	Uint_Current3_adc[num_sample];
                 ;unsigned int	Uint_CurrentSet_adc[num_sample];
                 ;unsigned char	Uchar_Sample_count;
                 ;
                 ;bit	Bit_AdcSample_full = 0;
                 ;
                 ;bit	Bit_TimerOverflow = 0;
                 ;
                 ;/*-----------------------------------------------------*/
                 ;// Timer1 overflow interrupt service routine
                 ;// Timer 10ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0042 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000027 93ea      	ST   -Y,R30
                 ; 0000 0043 // Reinitialize Timer1 value
                 ; 0000 0044 	TCNT1H=0xCF2C >> 8;
000028 d0e1      	RCALL SUBOPT_0x0
                 ; 0000 0045 	TCNT1L=0xCF2C & 0xff;
                 ; 0000 0046 	Bit_TimerOverflow = 1;
000029 9a99      	SBI  0x13,1
                 ; 0000 0047 }
00002a 91e9      	LD   R30,Y+
00002b 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;// ADC 10 bit
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0051 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 0052 	ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
00002c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00002d 81e8      	LD   R30,Y
00002e 73ef      	ANDI R30,LOW(0x3F)
00002f b9e7      	OUT  0x7,R30
                 ; 0000 0053 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0054 	delay_us(10);
                +
000030 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000031 958a     +DEC R24
000032 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 0055 	// Start the AD conversion
                 ; 0000 0056 	ADCSRA|=(1<<ADSC);
000033 9a36      	SBI  0x6,6
                 ; 0000 0057 	// Wait for the AD conversion to complete
                 ; 0000 0058 	while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
000034 9b34      	SBIS 0x6,4
000035 cffe      	RJMP _0x5
                 ; 0000 0059 	ADCSRA|=(1<<ADIF);
000036 9a34      	SBI  0x6,4
                 ; 0000 005A 	return ADCW;
000037 b1e4      	IN   R30,0x4
000038 b1f5      	IN   R31,0x4+1
000039 9621      	ADIW R28,1
00003a 9508      	RET
                 ; 0000 005B }
                 ; .FEND
                 ;
                 ;/*
                 ;*	Doc gia tri ADC cac dong dien theo chu ki cua timer.
                 ;*	Lay gia tri trung binh cac thong so doc duoc.
                 ;* 	So sanh dong dien tieu thu (1,2,3) voi gia tri cai dat (current_set)
                 ;*	Bat co canh bao khi dong dien tieu thi lon hon cai dat.
                 ;*/
                 ;unsigned char	Current_get_value(void)
                 ; 0000 0064 {
                 _Current_get_value:
                 ; .FSTART _Current_get_value
                 ; 0000 0065 	if(Bit_TimerOverflow)
00003b 9b99      	SBIS 0x13,1
00003c c08b      	RJMP _0x8
                 ; 0000 0066 	{
                 ; 0000 0067 		unsigned char	Uchar_loop_cnt = 0;
                 ; 0000 0068 		unsigned int	Uint_Current_value = 0;
                 ; 0000 0069 		unsigned int	Uint_CurrentSet_value = 0;
                 ; 0000 006A 		Bit_TimerOverflow = 0;
00003d 9725      	SBIW R28,5
00003e e0e0      	LDI  R30,LOW(0)
00003f 83e8      	ST   Y,R30
000040 83e9      	STD  Y+1,R30
000041 83ea      	STD  Y+2,R30
000042 83eb      	STD  Y+3,R30
000043 d0cb      	RCALL SUBOPT_0x1
                 ;	Uchar_loop_cnt -> Y+4
                 ;	Uint_Current_value -> Y+2
                 ;	Uint_CurrentSet_value -> Y+0
000044 9899      	CBI  0x13,1
                 ; 0000 006B 
                 ; 0000 006C 		Uint_Current1_adc[Uchar_Sample_count] = read_adc(current_1);
000045 2de3      	MOV  R30,R3
000046 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
000047 d0ca      	RCALL SUBOPT_0x2
000048 93ef      	PUSH R30
000049 e0a1      	LDI  R26,LOW(1)
00004a dfe1      	RCALL _read_adc
00004b 91af      	POP  R26
00004c d0c8      	RCALL SUBOPT_0x3
                 ; 0000 006D 		Uint_Current2_adc[Uchar_Sample_count] = read_adc(current_2);
00004d e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
00004e d0c3      	RCALL SUBOPT_0x2
00004f 93ef      	PUSH R30
000050 e0a2      	LDI  R26,LOW(2)
000051 dfda      	RCALL _read_adc
000052 91af      	POP  R26
000053 d0c1      	RCALL SUBOPT_0x3
                 ; 0000 006E 		Uint_Current3_adc[Uchar_Sample_count] = read_adc(current_3);
000054 e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
000055 d0bc      	RCALL SUBOPT_0x2
000056 93ef      	PUSH R30
000057 e0a3      	LDI  R26,LOW(3)
000058 dfd3      	RCALL _read_adc
000059 91af      	POP  R26
00005a d0ba      	RCALL SUBOPT_0x3
                 ; 0000 006F 		Uint_CurrentSet_adc[Uchar_Sample_count] = read_adc(current_set);
00005b eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
00005c d0b5      	RCALL SUBOPT_0x2
00005d 93ef      	PUSH R30
00005e e0a7      	LDI  R26,LOW(7)
00005f dfcc      	RCALL _read_adc
000060 91af      	POP  R26
000061 93ed      	ST   X+,R30
000062 93fc      	ST   X,R31
                 ; 0000 0070 
                 ; 0000 0071 		Uchar_Sample_count++;
000063 9433      	INC  R3
                 ; 0000 0072 		if(Uchar_Sample_count >= num_sample)
000064 e0ea      	LDI  R30,LOW(10)
000065 163e      	CP   R3,R30
000066 f010      	BRLO _0xB
                 ; 0000 0073 		{
                 ; 0000 0074 			Uchar_Sample_count = 0;
000067 2433      	CLR  R3
                 ; 0000 0075 			Bit_AdcSample_full = 1;
000068 9a98      	SBI  0x13,0
                 ; 0000 0076 		}
                 ; 0000 0077 
                 ; 0000 0078 
                 ; 0000 0079 		if(Bit_AdcSample_full == 0)
                 _0xB:
000069 9998      	SBIC 0x13,0
00006a c032      	RJMP _0xE
                 ; 0000 007A 		{
                 ; 0000 007B 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
00006b d0a3      	RCALL SUBOPT_0x1
                 _0x10:
00006c 81ac      	LDD  R26,Y+4
00006d 15a3      	CP   R26,R3
00006e f418      	BRSH _0x11
                 ; 0000 007C 			{
                 ; 0000 007D 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
00006f d0a9      	RCALL SUBOPT_0x4
                 ; 0000 007E 			}
000070 d0b4      	RCALL SUBOPT_0x5
000071 cffa      	RJMP _0x10
                 _0x11:
                 ; 0000 007F 			Uint_CurrentSet_value /= Uchar_loop_cnt;
000072 d0b6      	RCALL SUBOPT_0x6
000073 81a8      	LD   R26,Y
000074 81b9      	LDD  R27,Y+1
000075 d0b6      	RCALL SUBOPT_0x7
                 ; 0000 0080 
                 ; 0000 0081 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x13:
000076 81ac      	LDD  R26,Y+4
000077 15a3      	CP   R26,R3
000078 f418      	BRSH _0x14
                 ; 0000 0082 			{
                 ; 0000 0083 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
000079 d0b6      	RCALL SUBOPT_0x8
                 ; 0000 0084 			}
00007a d0aa      	RCALL SUBOPT_0x5
00007b cffa      	RJMP _0x13
                 _0x14:
                 ; 0000 0085 			Uint_Current_value /= Uchar_loop_cnt;
00007c d0ac      	RCALL SUBOPT_0x6
00007d d0be      	RCALL SUBOPT_0x9
00007e d0c0      	RCALL SUBOPT_0xA
                 ; 0000 0086 			if(Uint_Current_value*current_1_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
00007f f410      	BRSH _0x15
000080 e0e0      	LDI  R30,LOW(0)
000081 c043      	RJMP _0x2000001
                 ; 0000 0087 
                 ; 0000 0088 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x15:
000082 d08c      	RCALL SUBOPT_0x1
                 _0x17:
000083 81ac      	LDD  R26,Y+4
000084 15a3      	CP   R26,R3
000085 f418      	BRSH _0x18
                 ; 0000 0089 			{
                 ; 0000 008A 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
000086 d0c1      	RCALL SUBOPT_0xB
                 ; 0000 008B 			}
000087 d09d      	RCALL SUBOPT_0x5
000088 cffa      	RJMP _0x17
                 _0x18:
                 ; 0000 008C 			Uint_Current_value /= Uchar_loop_cnt;
000089 d09f      	RCALL SUBOPT_0x6
00008a d0b1      	RCALL SUBOPT_0x9
00008b d0b3      	RCALL SUBOPT_0xA
                 ; 0000 008D 			if(Uint_Current_value*current_2_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
00008c f410      	BRSH _0x19
00008d e0e0      	LDI  R30,LOW(0)
00008e c036      	RJMP _0x2000001
                 ; 0000 008E 
                 ; 0000 008F 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt <= Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x19:
00008f d07f      	RCALL SUBOPT_0x1
                 _0x1B:
000090 81ac      	LDD  R26,Y+4
000091 163a      	CP   R3,R26
000092 f018      	BRLO _0x1C
                 ; 0000 0090 			{
                 ; 0000 0091 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
000093 d0bf      	RCALL SUBOPT_0xC
                 ; 0000 0092 			}
000094 d090      	RCALL SUBOPT_0x5
000095 cffa      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0093 			Uint_Current_value /= Uchar_loop_cnt;
000096 d092      	RCALL SUBOPT_0x6
000097 d0a4      	RCALL SUBOPT_0x9
000098 d0a6      	RCALL SUBOPT_0xA
                 ; 0000 0094 			if(Uint_Current_value*current_3_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
000099 f410      	BRSH _0x1D
00009a e0e0      	LDI  R30,LOW(0)
00009b c029      	RJMP _0x2000001
                 ; 0000 0095 		}
                 _0x1D:
                 ; 0000 0096 		else
00009c c027      	RJMP _0x1E
                 _0xE:
                 ; 0000 0097 		{
                 ; 0000 0098 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
00009d d071      	RCALL SUBOPT_0x1
                 _0x20:
00009e d0bf      	RCALL SUBOPT_0xD
00009f f418      	BRSH _0x21
                 ; 0000 0099 			{
                 ; 0000 009A 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
0000a0 d078      	RCALL SUBOPT_0x4
                 ; 0000 009B 			}
0000a1 d083      	RCALL SUBOPT_0x5
0000a2 cffb      	RJMP _0x20
                 _0x21:
                 ; 0000 009C 			Uint_CurrentSet_value /= num_sample;
0000a3 81a8      	LD   R26,Y
0000a4 81b9      	LDD  R27,Y+1
0000a5 d0bb      	RCALL SUBOPT_0xE
0000a6 d085      	RCALL SUBOPT_0x7
                 ; 0000 009D 
                 ; 0000 009E 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x23:
0000a7 d0b6      	RCALL SUBOPT_0xD
0000a8 f418      	BRSH _0x24
                 ; 0000 009F 			{
                 ; 0000 00A0 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
0000a9 d086      	RCALL SUBOPT_0x8
                 ; 0000 00A1 			}
0000aa d07a      	RCALL SUBOPT_0x5
0000ab cffb      	RJMP _0x23
                 _0x24:
                 ; 0000 00A2 			Uint_Current_value /=num_sample;
0000ac d0b7      	RCALL SUBOPT_0xF
                 ; 0000 00A3 			if(Uint_Current_value*current_1_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
0000ad f410      	BRSH _0x25
0000ae e0e0      	LDI  R30,LOW(0)
0000af c015      	RJMP _0x2000001
                 ; 0000 00A4 
                 ; 0000 00A5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x25:
0000b0 d05e      	RCALL SUBOPT_0x1
                 _0x27:
0000b1 d0ac      	RCALL SUBOPT_0xD
0000b2 f418      	BRSH _0x28
                 ; 0000 00A6 			{
                 ; 0000 00A7 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
0000b3 d094      	RCALL SUBOPT_0xB
                 ; 0000 00A8 			}
0000b4 d070      	RCALL SUBOPT_0x5
0000b5 cffb      	RJMP _0x27
                 _0x28:
                 ; 0000 00A9 			Uint_Current_value /=num_sample;
0000b6 d0ad      	RCALL SUBOPT_0xF
                 ; 0000 00AA 			if(Uint_Current_value*current_2_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
0000b7 f410      	BRSH _0x29
0000b8 e0e0      	LDI  R30,LOW(0)
0000b9 c00b      	RJMP _0x2000001
                 ; 0000 00AB 
                 ; 0000 00AC 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x29:
0000ba d054      	RCALL SUBOPT_0x1
                 _0x2B:
0000bb d0a2      	RCALL SUBOPT_0xD
0000bc f418      	BRSH _0x2C
                 ; 0000 00AD 			{
                 ; 0000 00AE 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
0000bd d095      	RCALL SUBOPT_0xC
                 ; 0000 00AF 			}
0000be d066      	RCALL SUBOPT_0x5
0000bf cffb      	RJMP _0x2B
                 _0x2C:
                 ; 0000 00B0 			Uint_Current_value /= num_sample;
0000c0 d0a3      	RCALL SUBOPT_0xF
                 ; 0000 00B1 			if(Uint_Current_value*current_3_scale > Uint_CurrentSet_value*current_set_scale)	return Err;
0000c1 f410      	BRSH _0x2D
0000c2 e0e0      	LDI  R30,LOW(0)
0000c3 c001      	RJMP _0x2000001
                 ; 0000 00B2 		}
                 _0x2D:
                 _0x1E:
                 ; 0000 00B3 		return Ok;
0000c4 e0e1      	LDI  R30,LOW(1)
                 _0x2000001:
0000c5 9625      	ADIW R28,5
0000c6 9508      	RET
                 ; 0000 00B4 	}
0000c7 9625      	ADIW R28,5
                 ; 0000 00B5 	return Processing;
                 _0x8:
0000c8 e0e2      	LDI  R30,LOW(2)
0000c9 9508      	RET
                 ; 0000 00B6 }
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;*	Dieu khien cac tin hieu canh bao dua vao trang thai cac co canh bao
                 ;*/
                 ;void	Protect_control(void)
                 ; 0000 00BD {
                 _Protect_control:
                 ; .FSTART _Protect_control
                 ; 0000 00BE 	unsigned char	Uchar_respone = Processing;
                 ; 0000 00BF 	Uchar_respone = Current_get_value();
0000ca 931a      	ST   -Y,R17
                 ;	Uchar_respone -> R17
0000cb e012      	LDI  R17,2
0000cc df6e      	RCALL _Current_get_value
0000cd 2f1e      	MOV  R17,R30
                 ; 0000 00C0 	if(Uchar_respone == Err)
0000ce 3010      	CPI  R17,0
0000cf f411      	BRNE _0x2E
                 ; 0000 00C1 	{
                 ; 0000 00C2 		BUZZER_ON;
0000d0 9ac2      	SBI  0x18,2
                 ; 0000 00C3 	}
                 ; 0000 00C4 	else
0000d1 c001      	RJMP _0x31
                 _0x2E:
                 ; 0000 00C5 	{
                 ; 0000 00C6 		BUZZER_OFF;
0000d2 98c2      	CBI  0x18,2
                 ; 0000 00C7 	}
                 _0x31:
                 ; 0000 00C8 }
0000d3 9119      	LD   R17,Y+
0000d4 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00CB {
                 _main:
                 ; .FSTART _main
                 ; 0000 00CC // Declare your local variables here
                 ; 0000 00CD 
                 ; 0000 00CE // Crystal Oscillator division factor: 1
                 ; 0000 00CF #pragma optsize-
                 ; 0000 00D0 CLKPR=(1<<CLKPCE);
0000d5 e8e0      	LDI  R30,LOW(128)
0000d6 bde6      	OUT  0x26,R30
                 ; 0000 00D1 CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000d7 e0e0      	LDI  R30,LOW(0)
0000d8 bde6      	OUT  0x26,R30
                 ; 0000 00D2 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00D3 #pragma optsize+
                 ; 0000 00D4 #endif
                 ; 0000 00D5 // Input/Output Ports initialization
                 ; 0000 00D6 // Port A initialization
                 ; 0000 00D7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00D8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000d9 bbea      	OUT  0x1A,R30
                 ; 0000 00D9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000da bbeb      	OUT  0x1B,R30
                 ; 0000 00DB 
                 ; 0000 00DC // Port B initialization
                 ; 0000 00DD // Function: Bit3=Out Bit2=In Bit1=Out Bit0=Out
                 ; 0000 00DE DDRB=(1<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000db e0eb      	LDI  R30,LOW(11)
0000dc bbe7      	OUT  0x17,R30
                 ; 0000 00DF // State: Bit3=0 Bit2=T Bit1=0 Bit0=0
                 ; 0000 00E0 PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000dd e0e0      	LDI  R30,LOW(0)
0000de bbe8      	OUT  0x18,R30
                 ; 0000 00E1 
                 ; 0000 00E2 // Timer/Counter 0 initialization
                 ; 0000 00E3 // Clock source: System Clock
                 ; 0000 00E4 // Clock value: Timer 0 Stopped
                 ; 0000 00E5 // Mode: Normal top=0xFF
                 ; 0000 00E6 // OC0A output: Disconnected
                 ; 0000 00E7 // OC0B output: Disconnected
                 ; 0000 00E8 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000df bfe0      	OUT  0x30,R30
                 ; 0000 00E9 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000e0 bfe3      	OUT  0x33,R30
                 ; 0000 00EA TCNT0=0x00;
0000e1 bfe2      	OUT  0x32,R30
                 ; 0000 00EB OCR0A=0x00;
0000e2 bfe6      	OUT  0x36,R30
                 ; 0000 00EC OCR0B=0x00;
0000e3 bfec      	OUT  0x3C,R30
                 ; 0000 00ED 
                 ; 0000 00EE // Timer/Counter 1 initialization
                 ; 0000 00EF // Clock source: System Clock
                 ; 0000 00F0 // Clock value: 125,000 kHz
                 ; 0000 00F1 // Mode: Normal top=0xFFFF
                 ; 0000 00F2 // OC1A output: Disconnected
                 ; 0000 00F3 // OC1B output: Disconnected
                 ; 0000 00F4 // Noise Canceler: Off
                 ; 0000 00F5 // Input Capture on Falling Edge
                 ; 0000 00F6 // Timer Period: 0,1 s
                 ; 0000 00F7 // Timer1 Overflow Interrupt: On
                 ; 0000 00F8 // Input Capture Interrupt: Off
                 ; 0000 00F9 // Compare A Match Interrupt: Off
                 ; 0000 00FA // Compare B Match Interrupt: Off
                 ; 0000 00FB TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000e4 bdef      	OUT  0x2F,R30
                 ; 0000 00FC TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000e5 e0e3      	LDI  R30,LOW(3)
0000e6 bdee      	OUT  0x2E,R30
                 ; 0000 00FD TCNT1H=0xCF;
0000e7 d022      	RCALL SUBOPT_0x0
                 ; 0000 00FE TCNT1L=0x2C;
                 ; 0000 00FF ICR1H=0x00;
0000e8 e0e0      	LDI  R30,LOW(0)
0000e9 bde5      	OUT  0x25,R30
                 ; 0000 0100 ICR1L=0x00;
0000ea bde4      	OUT  0x24,R30
                 ; 0000 0101 OCR1AH=0x00;
0000eb bdeb      	OUT  0x2B,R30
                 ; 0000 0102 OCR1AL=0x00;
0000ec bdea      	OUT  0x2A,R30
                 ; 0000 0103 OCR1BH=0x00;
0000ed bde9      	OUT  0x29,R30
                 ; 0000 0104 OCR1BL=0x00;
0000ee bde8      	OUT  0x28,R30
                 ; 0000 0105 
                 ; 0000 0106 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0107 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
0000ef bfe9      	OUT  0x39,R30
                 ; 0000 0108 
                 ; 0000 0109 // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 010A TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
0000f0 e0e1      	LDI  R30,LOW(1)
0000f1 b9ec      	OUT  0xC,R30
                 ; 0000 010B 
                 ; 0000 010C // External Interrupt(s) initialization
                 ; 0000 010D // INT0: Off
                 ; 0000 010E // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 010F // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 0110 MCUCR=(0<<ISC01) | (0<<ISC00);
0000f2 e0e0      	LDI  R30,LOW(0)
0000f3 bfe5      	OUT  0x35,R30
                 ; 0000 0111 GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
0000f4 bfeb      	OUT  0x3B,R30
                 ; 0000 0112 
                 ; 0000 0113 // USI initialization
                 ; 0000 0114 // Mode: Disabled
                 ; 0000 0115 // Clock source: Register & Counter=no clk.
                 ; 0000 0116 // USI Counter Overflow Interrupt: Off
                 ; 0000 0117 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
0000f5 b9ed      	OUT  0xD,R30
                 ; 0000 0118 
                 ; 0000 0119 // Analog Comparator initialization
                 ; 0000 011A // Analog Comparator: Off
                 ; 0000 011B // The Analog Comparator's positive input is
                 ; 0000 011C // connected to the AIN0 pin
                 ; 0000 011D // The Analog Comparator's negative input is
                 ; 0000 011E // connected to the AIN1 pin
                 ; 0000 011F ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000f6 e8e0      	LDI  R30,LOW(128)
0000f7 b9e8      	OUT  0x8,R30
                 ; 0000 0120 // Digital input buffer on AIN0: On
                 ; 0000 0121 // Digital input buffer on AIN1: On
                 ; 0000 0122 DIDR0=(0<<ADC1D) | (0<<ADC2D);
0000f8 e0e0      	LDI  R30,LOW(0)
0000f9 b9e1      	OUT  0x1,R30
                 ; 0000 0123 
                 ; 0000 0124 // ADC initialization
                 ; 0000 0125 // ADC Clock frequency: 1000,000 kHz
                 ; 0000 0126 // ADC Voltage Reference: AVCC pin
                 ; 0000 0127 // ADC Bipolar Input Mode: Off
                 ; 0000 0128 // ADC Auto Trigger Source: Free Running
                 ; 0000 0129 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 012A // ADC4: Off, ADC5: Off, ADC6: Off, ADC7: On
                 ; 0000 012B DIDR0=(0<<ADC7D) | (1<<ADC6D) | (1<<ADC5D) | (1<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
0000fa e7e1      	LDI  R30,LOW(113)
0000fb b9e1      	OUT  0x1,R30
                 ; 0000 012C ADMUX=ADC_VREF_TYPE;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd b9e7      	OUT  0x7,R30
                 ; 0000 012D ADCSRA=(1<<ADEN) | (0<<ADSC) | (1<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
0000fe eae3      	LDI  R30,LOW(163)
0000ff b9e6      	OUT  0x6,R30
                 ; 0000 012E ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000100 e0e0      	LDI  R30,LOW(0)
000101 b9e3      	OUT  0x3,R30
                 ; 0000 012F 
                 ; 0000 0130 
                 ; 0000 0131 // Watchdog Timer initialization
                 ; 0000 0132 // Watchdog Timer Prescaler: OSC/2k
                 ; 0000 0133 // Watchdog timeout action: Reset
                 ; 0000 0134 #pragma optsize-
                 ; 0000 0135 WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
000102 e1e8      	LDI  R30,LOW(24)
000103 bde1      	OUT  0x21,R30
                 ; 0000 0136 WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
000104 e0e8      	LDI  R30,LOW(8)
000105 bde1      	OUT  0x21,R30
                 ; 0000 0137 #ifdef _OPTIMIZE_SIZE_
                 ; 0000 0138 #pragma optsize+
                 ; 0000 0139 #endif
                 ; 0000 013A 
                 ; 0000 013B // Global enable interrupts
                 ; 0000 013C #asm("sei")
000106 9478      	sei
                 ; 0000 013D 
                 ; 0000 013E 	while (1)
                 _0x34:
                 ; 0000 013F 	{
                 ; 0000 0140 		Protect_control();
000107 dfc2      	RCALL _Protect_control
                 ; 0000 0141 	}
000108 cffe      	RJMP _0x34
                 ; 0000 0142 }
                 _0x37:
000109 cfff      	RJMP _0x37
                 ; .FEND
                 
                 	.DSEG
                 _Uint_Current1_adc:
000068           	.BYTE 0x14
                 _Uint_Current2_adc:
00007c           	.BYTE 0x14
                 _Uint_Current3_adc:
000090           	.BYTE 0x14
                 _Uint_CurrentSet_adc:
0000a4           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00010a ecef      	LDI  R30,LOW(207)
00010b bded      	OUT  0x2D,R30
00010c e2ec      	LDI  R30,LOW(44)
00010d bdec      	OUT  0x2C,R30
00010e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
00010f e0e0      	LDI  R30,LOW(0)
000110 83ec      	STD  Y+4,R30
000111 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000112 0fee      	LSL  R30
000113 0fea      	ADD  R30,R26
000114 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000115 93ed      	ST   X+,R30
000116 93fc      	ST   X,R31
000117 2de3      	MOV  R30,R3
000118 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
000119 81ec      	LDD  R30,Y+4
00011a eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
00011b 0fee      	LSL  R30
00011c 0fae      	ADD  R26,R30
00011d d05c      	RCALL __GETW1P
00011e 81a8      	LD   R26,Y
00011f 81b9      	LDD  R27,Y+1
000120 0fea      	ADD  R30,R26
000121 1ffb      	ADC  R31,R27
000122 83e8      	ST   Y,R30
000123 83f9      	STD  Y+1,R31
000124 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
000125 81ec      	LDD  R30,Y+4
000126 5fef      	SUBI R30,-LOW(1)
000127 83ec      	STD  Y+4,R30
000128 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
000129 81ec      	LDD  R30,Y+4
00012a e0f0      	LDI  R31,0
00012b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00012c d03a      	RCALL __DIVW21U
00012d 83e8      	ST   Y,R30
00012e 83f9      	STD  Y+1,R31
00012f cfdf      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x8:
000130 81ec      	LDD  R30,Y+4
000131 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
000132 0fee      	LSL  R30
000133 0fae      	ADD  R26,R30
000134 d045      	RCALL __GETW1P
000135 81aa      	LDD  R26,Y+2
000136 81bb      	LDD  R27,Y+2+1
000137 0fea      	ADD  R30,R26
000138 1ffb      	ADC  R31,R27
000139 83ea      	STD  Y+2,R30
00013a 83fb      	STD  Y+2+1,R31
00013b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x9:
00013c 81aa      	LDD  R26,Y+2
00013d 81bb      	LDD  R27,Y+2+1
00013e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0xA:
00013f d027      	RCALL __DIVW21U
000140 83ea      	STD  Y+2,R30
000141 83fb      	STD  Y+2+1,R31
000142 81e8      	LD   R30,Y
000143 81f9      	LDD  R31,Y+1
000144 dff7      	RCALL SUBOPT_0x9
000145 17ea      	CP   R30,R26
000146 07fb      	CPC  R31,R27
000147 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xB:
000148 81ec      	LDD  R30,Y+4
000149 e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
00014a 0fee      	LSL  R30
00014b 0fae      	ADD  R26,R30
00014c d02d      	RCALL __GETW1P
00014d dfee      	RCALL SUBOPT_0x9
00014e 0fea      	ADD  R30,R26
00014f 1ffb      	ADC  R31,R27
000150 83ea      	STD  Y+2,R30
000151 83fb      	STD  Y+2+1,R31
000152 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
000153 81ec      	LDD  R30,Y+4
000154 e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
000155 0fee      	LSL  R30
000156 0fae      	ADD  R26,R30
000157 d022      	RCALL __GETW1P
000158 dfe3      	RCALL SUBOPT_0x9
000159 0fea      	ADD  R30,R26
00015a 1ffb      	ADC  R31,R27
00015b 83ea      	STD  Y+2,R30
00015c 83fb      	STD  Y+2+1,R31
00015d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xD:
00015e 81ac      	LDD  R26,Y+4
00015f 30aa      	CPI  R26,LOW(0xA)
000160 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000161 e0ea      	LDI  R30,LOW(10)
000162 e0f0      	LDI  R31,HIGH(10)
000163 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xF:
000164 dfd7      	RCALL SUBOPT_0x9
000165 dffb      	RCALL SUBOPT_0xE
000166 cfd8      	RJMP SUBOPT_0xA
                 
                 
                 	.CSEG
                 __DIVW21U:
000167 2400      	CLR  R0
000168 2411      	CLR  R1
000169 e190      	LDI  R25,16
                 __DIVW21U1:
00016a 0faa      	LSL  R26
00016b 1fbb      	ROL  R27
00016c 1c00      	ROL  R0
00016d 1c11      	ROL  R1
00016e 1a0e      	SUB  R0,R30
00016f 0a1f      	SBC  R1,R31
000170 f418      	BRCC __DIVW21U2
000171 0e0e      	ADD  R0,R30
000172 1e1f      	ADC  R1,R31
000173 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000174 60a1      	SBR  R26,1
                 __DIVW21U3:
000175 959a      	DEC  R25
000176 f799      	BRNE __DIVW21U1
000177 01fd      	MOVW R30,R26
000178 01d0      	MOVW R26,R0
000179 9508      	RET
                 
                 __GETW1P:
00017a 91ed      	LD   R30,X+
00017b 91fc      	LD   R31,X
00017c 95aa      	DEC  R26
00017d 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24 register use summary:
r0 :   5 r1 :   4 r2 :   0 r3 :   9 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   5 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   2 r26:  49 r27:  11 r28:   5 r29:   0 r30: 130 r31:  20 
x  :   8 y  :  47 z  :   0 
Registers used: 13 out of 35 (37.1%)

ATtiny24 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   5 add   :  10 
adiw  :   3 and   :   0 andi  :   1 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   0 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :   5 brpl  :   0 brsh  :  13 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 cbi   :   2 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :   4 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 
cpc   :   1 cpi   :   2 cpse  :   0 dec   :   5 des   :   0 eor   :   0 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   1 ld    :   9 ldd   :  19 ldi   :  54 lds   :   0 lpm   :   0 
lsl   :   6 lsr   :   0 mov   :   3 movw  :   2 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  41 
pop   :   4 push  :   4 rcall :  69 ret   :  20 reti  :   1 rjmp  :  42 
rol   :   3 ror   :   0 sbc   :   1 sbci  :   0 sbi   :   5 sbic  :   1 
sbis  :   2 sbiw  :   1 sbr   :   1 sbrc  :   0 sbrs  :   0 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  12 std   :  15 
sts   :   0 sub   :   1 subi  :   1 swap  :   0 tst   :   0 wdr   :   0 

Instructions used: 42 out of 114 (36.8%)

ATtiny24 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002fc    764      0    764    2048  37.3%
[.dseg] 0x000060 0x0000b8      0     80     80     128  62.5%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 1 warnings
