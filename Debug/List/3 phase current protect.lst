
AVRASM ver. 2.1.30  D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-curent-protect\Debug\List\3 phase current protect.asm Wed Nov 14 09:01:46 2018

D:\Mydata\Work\Tan Phat\Bien doi nguon 3 phase\Firmware_2\3-phase-curent-protect\Debug\List\3 phase current protect.asm(987): warning: Register r3 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATtiny24A
                 ;Program type           : Application
                 ;Clock frequency        : 8,000000 MHz
                 ;Memory model           : Tiny
                 ;Optimize for           : Size
                 ;(s)printf features     : int
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 8 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_TINY_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny24A
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 128
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 
                 	.EQU WDTCSR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0008
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _Uchar_Sample_count=R3
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c010      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 cffd      	RJMP 0x00
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 cffa      	RJMP 0x00
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 c01e      	RJMP _timer1_ovf_isr
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
                 
                 __RESET:
000011 94f8      	CLI
000012 27ee      	CLR  R30
000013 bbec      	OUT  EECR,R30
000014 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000015 e08d      	LDI  R24,(14-2)+1
000016 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000017 93ed      	ST   X+,R30
000018 958a      	DEC  R24
000019 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00001a e880      	LDI  R24,__CLEAR_SRAM_SIZE
00001b e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00001c 93ed      	ST   X+,R30
00001d 958a      	DEC  R24
00001e f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00001f e0e0      	LDI  R30,__GPIOR0_INIT
000020 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000021 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000022 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000023 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000024 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000025 e6c8      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000026 c0c2      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x68
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.12 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project : 3 Phase curent protect
                 ;Version : 1.0
                 ;Date    : 05/11/2018
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;Doc dien ap tu 3 pha, so sanh voi dien ap cai dat.
                 ;Dieu khien ngat dong dau vao khi dong tieu thu lon hon dong cai dat
                 ;
                 ;
                 ;Chip type               : ATtiny24
                 ;AVR Core Clock frequency: 8,000000 MHz
                 ;Memory model            : Tiny
                 ;External RAM size       : 0
                 ;Data Stack size         : 8
                 ;*******************************************************/
                 ;
                 ;#include <tiny24.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x18
                 	.EQU __sm_adc_noise_red=0x08
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x18
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#define	ADC_current_1	1
                 ;#define	ADC_current_2	2
                 ;#define	ADC_current_3	3
                 ;#define	ADC_current_set	7
                 ;
                 ;#define	num_sample	10
                 ;
                 ;#define	current_scale	6
                 ;
                 ;#define	CURRENT_SET_MAX	16
                 ;#define	CURRENT_SET_MIN	8
                 ;#define CURRENT_SET_ADC_VALUE_MAX     840
                 ;
                 ;//#define	v_num_noise_filter	3
                 ;
                 ;#define	DO_CONTROL_BUZZER	PORTB.0
                 ;#define	DO_CONTROL_RELAY	PORTB.1
                 ;
                 ;#define	BUZZER_ON	DO_CONTROL_BUZZER = 1
                 ;#define	BUZZER_OFF	DO_CONTROL_BUZZER = 0
                 ;
                 ;#define	RELAY_ON	DO_CONTROL_RELAY = 1
                 ;#define	RELAY_OFF	DO_CONTROL_RELAY = 0
                 ;
                 ;
                 ;#define	Err	0
                 ;#define	Ok	1
                 ;#define	Processing	2
                 ;
                 ;unsigned int	Uint_Current1_adc[num_sample];
                 ;unsigned int	Uint_Current2_adc[num_sample];
                 ;unsigned int	Uint_Current3_adc[num_sample];
                 ;unsigned int	Uint_CurrentSet_adc[num_sample];
                 ;unsigned char	Uchar_Sample_count;
                 ;
                 ;bit	Bit_AdcSample_full = 0;
                 ;
                 ;bit	Bit_TimerOverflow = 0;
                 ;
                 ;/*-----------------------------------------------------*/
                 ;// Timer1 overflow interrupt service routine
                 ;// Timer 10ms
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0048 {
                 
                 	.CSEG
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000027 93ea      	ST   -Y,R30
                 ; 0000 0049 // Reinitialize Timer1 value
                 ; 0000 004A 	TCNT1H=0xCF2C >> 8;
000028 d0f3      	RCALL SUBOPT_0x0
                 ; 0000 004B 	TCNT1L=0xCF2C & 0xff;
                 ; 0000 004C 	// TCNT1H=0x85EE >> 8;
                 ; 0000 004D 	// TCNT1L=0x85EE & 0xff;
                 ; 0000 004E 	Bit_TimerOverflow = 1;
000029 9a99      	SBI  0x13,1
                 ; 0000 004F }
00002a 91e9      	LD   R30,Y+
00002b 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;// Voltage Reference: AVCC pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0))
                 ;
                 ;// Read the AD conversion result
                 ;// ADC 10 bit
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 0059 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 005A 	ADMUX=(adc_input & 0x3f) | ADC_VREF_TYPE;
00002c 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
00002d 81e8      	LD   R30,Y
00002e 73ef      	ANDI R30,LOW(0x3F)
00002f b9e7      	OUT  0x7,R30
                 ; 0000 005B 	// Delay needed for the stabilization of the ADC input voltage
                 ; 0000 005C 	delay_us(10);
                +
000030 e18b     +LDI R24 , LOW ( 27 )
                +__DELAY_USB_LOOP :
000031 958a     +DEC R24
000032 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 27
                 ; 0000 005D 	// Start the AD conversion
                 ; 0000 005E 	ADCSRA|=(1<<ADSC);
000033 9a36      	SBI  0x6,6
                 ; 0000 005F 	// Wait for the AD conversion to complete
                 ; 0000 0060 	while ((ADCSRA & (1<<ADIF))==0);
                 _0x5:
000034 9b34      	SBIS 0x6,4
000035 cffe      	RJMP _0x5
                 ; 0000 0061 	ADCSRA|=(1<<ADIF);
000036 9a34      	SBI  0x6,4
                 ; 0000 0062 	return ADCW;
000037 b1e4      	IN   R30,0x4
000038 b1f5      	IN   R31,0x4+1
000039 9621      	ADIW R28,1
00003a 9508      	RET
                 ; 0000 0063 }
                 ; .FEND
                 ;
                 ;/*
                 ;*	Doc gia tri ADC cac dong dien theo chu ki cua timer.
                 ;*	Lay gia tri trung binh cac thong so doc duoc.
                 ;* 	So sanh dong dien tieu thu (1,2,3) voi gia tri cai dat (current_set)
                 ;*	Bat co canh bao khi dong dien tieu thi lon hon cai dat.
                 ;*   nhan 10 gia tri doc duoc de tang do phan giai so sanh
                 ;*/
                 ;unsigned char	Current_get_value(void)
                 ; 0000 006D {
                 _Current_get_value:
                 ; .FSTART _Current_get_value
                 ; 0000 006E 	if(Bit_TimerOverflow)
00003b 9b99      	SBIS 0x13,1
00003c c09b      	RJMP _0x8
                 ; 0000 006F 	{
                 ; 0000 0070 		unsigned char	Uchar_loop_cnt = 0;
                 ; 0000 0071 		unsigned int	Uint_Current_value = 0;
                 ; 0000 0072 		unsigned int	Uint_CurrentSet_value = 0;
                 ; 0000 0073 
                 ; 0000 0074 		Bit_TimerOverflow = 0;
00003d 9725      	SBIW R28,5
00003e e0e0      	LDI  R30,LOW(0)
00003f 83e8      	ST   Y,R30
000040 83e9      	STD  Y+1,R30
000041 83ea      	STD  Y+2,R30
000042 83eb      	STD  Y+3,R30
000043 d0dd      	RCALL SUBOPT_0x1
                 ;	Uchar_loop_cnt -> Y+4
                 ;	Uint_Current_value -> Y+2
                 ;	Uint_CurrentSet_value -> Y+0
000044 9899      	CBI  0x13,1
                 ; 0000 0075 
                 ; 0000 0076 		Uint_Current1_adc[Uchar_Sample_count] = read_adc(ADC_current_1);
000045 2de3      	MOV  R30,R3
000046 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
000047 d0dc      	RCALL SUBOPT_0x2
000048 93ef      	PUSH R30
000049 e0a1      	LDI  R26,LOW(1)
00004a dfe1      	RCALL _read_adc
00004b 91af      	POP  R26
00004c d0da      	RCALL SUBOPT_0x3
                 ; 0000 0077 		Uint_Current2_adc[Uchar_Sample_count] = read_adc(ADC_current_2);
00004d e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
00004e d0d5      	RCALL SUBOPT_0x2
00004f 93ef      	PUSH R30
000050 e0a2      	LDI  R26,LOW(2)
000051 dfda      	RCALL _read_adc
000052 91af      	POP  R26
000053 d0d3      	RCALL SUBOPT_0x3
                 ; 0000 0078 		Uint_Current3_adc[Uchar_Sample_count] = read_adc(ADC_current_3);
000054 e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
000055 d0ce      	RCALL SUBOPT_0x2
000056 93ef      	PUSH R30
000057 e0a3      	LDI  R26,LOW(3)
000058 dfd3      	RCALL _read_adc
000059 91af      	POP  R26
00005a d0cc      	RCALL SUBOPT_0x3
                 ; 0000 0079 		Uint_CurrentSet_adc[Uchar_Sample_count] = read_adc(ADC_current_set);
00005b eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
00005c d0c7      	RCALL SUBOPT_0x2
00005d 93ef      	PUSH R30
00005e e0a7      	LDI  R26,LOW(7)
00005f dfcc      	RCALL _read_adc
000060 91af      	POP  R26
000061 93ed      	ST   X+,R30
000062 93fc      	ST   X,R31
                 ; 0000 007A 
                 ; 0000 007B 		Uchar_Sample_count++;
000063 9433      	INC  R3
                 ; 0000 007C 		if(Uchar_Sample_count >= num_sample)
000064 e0ea      	LDI  R30,LOW(10)
000065 163e      	CP   R3,R30
000066 f010      	BRLO _0xB
                 ; 0000 007D 		{
                 ; 0000 007E 			Uchar_Sample_count = 0;
000067 2433      	CLR  R3
                 ; 0000 007F 			Bit_AdcSample_full = 1;
000068 9a98      	SBI  0x13,0
                 ; 0000 0080 		}
                 ; 0000 0081 
                 ; 0000 0082 
                 ; 0000 0083 		if(Bit_AdcSample_full == 0)
                 _0xB:
000069 9998      	SBIC 0x13,0
00006a c03a      	RJMP _0xE
                 ; 0000 0084 		{
                 ; 0000 0085 			/* tinh trung binh gia tri dien ap set doc duoc
                 ; 0000 0086             */
                 ; 0000 0087             for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
00006b d0b5      	RCALL SUBOPT_0x1
                 _0x10:
00006c 81ac      	LDD  R26,Y+4
00006d 15a3      	CP   R26,R3
00006e f418      	BRSH _0x11
                 ; 0000 0088 			{
                 ; 0000 0089 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
00006f d0bb      	RCALL SUBOPT_0x4
                 ; 0000 008A 			}
000070 d0c6      	RCALL SUBOPT_0x5
000071 cffa      	RJMP _0x10
                 _0x11:
                 ; 0000 008B 			Uint_CurrentSet_value /= Uchar_loop_cnt;
000072 d0c8      	RCALL SUBOPT_0x6
000073 d0ca      	RCALL SUBOPT_0x7
000074 d0cc      	RCALL SUBOPT_0x8
                 ; 0000 008C 			if(Uint_CurrentSet_value >= CURRENT_SET_ADC_VALUE_MAX)	Uint_CurrentSet_value = CURRENT_SET_ADC_VALUE_MAX;
000075 f010      	BRLO _0x12
000076 d0d2      	RCALL SUBOPT_0x9
000077 d0d4      	RCALL SUBOPT_0xA
                 ; 0000 008D 			Uint_CurrentSet_value = (unsigned int)((float)(Uint_CurrentSet_value*10/CURRENT_SET_ADC_VALUE_MAX)*(CURRENT_SET_MAX - ...
                 _0x12:
000078 d0d6      	RCALL SUBOPT_0xB
000079 d0d8      	RCALL SUBOPT_0xC
00007a d0db      	RCALL SUBOPT_0xD
                 ; 0000 008E 
                 ; 0000 008F 
                 ; 0000 0090             /* TInh trung binh gia tri dien ap doc duoc tu L1 */
                 ; 0000 0091 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x14:
00007b 81ac      	LDD  R26,Y+4
00007c 15a3      	CP   R26,R3
00007d f418      	BRSH _0x15
                 ; 0000 0092 			{
                 ; 0000 0093 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
00007e d0e9      	RCALL SUBOPT_0xE
                 ; 0000 0094 			}
00007f d0b7      	RCALL SUBOPT_0x5
000080 cffa      	RJMP _0x14
                 _0x15:
                 ; 0000 0095 			Uint_Current_value /= Uchar_loop_cnt;
000081 d0b9      	RCALL SUBOPT_0x6
000082 d0f1      	RCALL SUBOPT_0xF
000083 d0f3      	RCALL SUBOPT_0x10
                 ; 0000 0096 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
000084 d0fc      	RCALL SUBOPT_0x11
                 ; 0000 0097 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
000085 f410      	BRSH _0x16
000086 e0e0      	LDI  R30,LOW(0)
000087 c04d      	RJMP _0x2000001
                 ; 0000 0098 
                 ; 0000 0099 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x16:
000088 d098      	RCALL SUBOPT_0x1
                 _0x18:
000089 81ac      	LDD  R26,Y+4
00008a 15a3      	CP   R26,R3
00008b f418      	BRSH _0x19
                 ; 0000 009A 			{
                 ; 0000 009B 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
00008c d0fe      	RCALL SUBOPT_0x12
                 ; 0000 009C 			}
00008d d0a9      	RCALL SUBOPT_0x5
00008e cffa      	RJMP _0x18
                 _0x19:
                 ; 0000 009D 			Uint_Current_value /= Uchar_loop_cnt;
00008f d0ab      	RCALL SUBOPT_0x6
000090 d0e3      	RCALL SUBOPT_0xF
000091 d0e5      	RCALL SUBOPT_0x10
                 ; 0000 009E 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
000092 d0ee      	RCALL SUBOPT_0x11
                 ; 0000 009F 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
000093 f410      	BRSH _0x1A
000094 e0e0      	LDI  R30,LOW(0)
000095 c03f      	RJMP _0x2000001
                 ; 0000 00A0 			// if(Uint_Current_value > 40)	return Err;
                 ; 0000 00A1 
                 ; 0000 00A2 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt <= Uchar_Sample_count; Uchar_loop_cnt++)
                 _0x1A:
000096 d08a      	RCALL SUBOPT_0x1
                 _0x1C:
000097 81ac      	LDD  R26,Y+4
000098 163a      	CP   R3,R26
000099 f018      	BRLO _0x1D
                 ; 0000 00A3 			{
                 ; 0000 00A4 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
00009a d0fb      	RCALL SUBOPT_0x13
                 ; 0000 00A5 			}
00009b d09b      	RCALL SUBOPT_0x5
00009c cffa      	RJMP _0x1C
                 _0x1D:
                 ; 0000 00A6 			Uint_Current_value /= Uchar_loop_cnt;
00009d d09d      	RCALL SUBOPT_0x6
00009e d0d5      	RCALL SUBOPT_0xF
00009f d0d7      	RCALL SUBOPT_0x10
                 ; 0000 00A7 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000a0 d0e0      	RCALL SUBOPT_0x11
                 ; 0000 00A8 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000a1 f410      	BRSH _0x1E
0000a2 e0e0      	LDI  R30,LOW(0)
0000a3 c031      	RJMP _0x2000001
                 ; 0000 00A9         }
                 _0x1E:
                 ; 0000 00AA 		else
0000a4 c02f      	RJMP _0x1F
                 _0xE:
                 ; 0000 00AB 		{
                 ; 0000 00AC 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
0000a5 d07b      	RCALL SUBOPT_0x1
                 _0x21:
0000a6 d0fa      	RCALL SUBOPT_0x14
0000a7 f418      	BRSH _0x22
                 ; 0000 00AD 			{
                 ; 0000 00AE 				Uint_CurrentSet_value += Uint_CurrentSet_adc[Uchar_loop_cnt];
0000a8 d082      	RCALL SUBOPT_0x4
                 ; 0000 00AF 			}
0000a9 d08d      	RCALL SUBOPT_0x5
0000aa cffb      	RJMP _0x21
                 _0x22:
                 ; 0000 00B0 			Uint_CurrentSet_value /= num_sample;
0000ab d092      	RCALL SUBOPT_0x7
0000ac d0f7      	RCALL SUBOPT_0x15
0000ad d093      	RCALL SUBOPT_0x8
                 ; 0000 00B1 			if(Uint_CurrentSet_value >= CURRENT_SET_ADC_VALUE_MAX)	Uint_CurrentSet_value = CURRENT_SET_ADC_VALUE_MAX;
0000ae f010      	BRLO _0x23
0000af d099      	RCALL SUBOPT_0x9
0000b0 d09b      	RCALL SUBOPT_0xA
                 ; 0000 00B2 			Uint_CurrentSet_value = (unsigned int)((float)(Uint_CurrentSet_value*10/CURRENT_SET_ADC_VALUE_MAX)*(CURRENT_SET_MAX - ...
                 _0x23:
0000b1 d09d      	RCALL SUBOPT_0xB
0000b2 d09f      	RCALL SUBOPT_0xC
0000b3 d0a2      	RCALL SUBOPT_0xD
                 ; 0000 00B3 
                 ; 0000 00B4 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x25:
0000b4 d0ec      	RCALL SUBOPT_0x14
0000b5 f418      	BRSH _0x26
                 ; 0000 00B5 			{
                 ; 0000 00B6 				Uint_Current_value += Uint_Current1_adc[Uchar_loop_cnt];
0000b6 d0b1      	RCALL SUBOPT_0xE
                 ; 0000 00B7 			}
0000b7 d07f      	RCALL SUBOPT_0x5
0000b8 cffb      	RJMP _0x25
                 _0x26:
                 ; 0000 00B8 			Uint_Current_value /=num_sample;
0000b9 d0ed      	RCALL SUBOPT_0x16
                 ; 0000 00B9 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000ba d0c6      	RCALL SUBOPT_0x11
                 ; 0000 00BA 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000bb f410      	BRSH _0x27
0000bc e0e0      	LDI  R30,LOW(0)
0000bd c017      	RJMP _0x2000001
                 ; 0000 00BB 
                 ; 0000 00BC 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x27:
0000be d062      	RCALL SUBOPT_0x1
                 _0x29:
0000bf d0e1      	RCALL SUBOPT_0x14
0000c0 f418      	BRSH _0x2A
                 ; 0000 00BD 			{
                 ; 0000 00BE 				Uint_Current_value += Uint_Current2_adc[Uchar_loop_cnt];
0000c1 d0c9      	RCALL SUBOPT_0x12
                 ; 0000 00BF 			}
0000c2 d074      	RCALL SUBOPT_0x5
0000c3 cffb      	RJMP _0x29
                 _0x2A:
                 ; 0000 00C0 			Uint_Current_value /=num_sample;
0000c4 d0e2      	RCALL SUBOPT_0x16
                 ; 0000 00C1 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000c5 d0bb      	RCALL SUBOPT_0x11
                 ; 0000 00C2 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000c6 f410      	BRSH _0x2B
0000c7 e0e0      	LDI  R30,LOW(0)
0000c8 c00c      	RJMP _0x2000001
                 ; 0000 00C3 			// if(Uint_Current_value > 40)	return Err;
                 ; 0000 00C4 
                 ; 0000 00C5 			for(Uchar_loop_cnt = 0; Uchar_loop_cnt < num_sample; Uchar_loop_cnt++)
                 _0x2B:
0000c9 d057      	RCALL SUBOPT_0x1
                 _0x2D:
0000ca d0d6      	RCALL SUBOPT_0x14
0000cb f418      	BRSH _0x2E
                 ; 0000 00C6 			{
                 ; 0000 00C7 				Uint_Current_value += Uint_Current3_adc[Uchar_loop_cnt];
0000cc d0c9      	RCALL SUBOPT_0x13
                 ; 0000 00C8 			}
0000cd d069      	RCALL SUBOPT_0x5
0000ce cffb      	RJMP _0x2D
                 _0x2E:
                 ; 0000 00C9 			Uint_Current_value /= num_sample;
0000cf d0d7      	RCALL SUBOPT_0x16
                 ; 0000 00CA 			Uint_Current_value = Uint_Current_value*5*current_scale*10/1024;
0000d0 d0b0      	RCALL SUBOPT_0x11
                 ; 0000 00CB 			if(Uint_Current_value > Uint_CurrentSet_value)	return Err;
0000d1 f410      	BRSH _0x2F
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 c001      	RJMP _0x2000001
                 ; 0000 00CC 		}
                 _0x2F:
                 _0x1F:
                 ; 0000 00CD 		return Ok;
0000d4 e0e1      	LDI  R30,LOW(1)
                 _0x2000001:
0000d5 9625      	ADIW R28,5
0000d6 9508      	RET
                 ; 0000 00CE 	}
0000d7 9625      	ADIW R28,5
                 ; 0000 00CF 	return Processing;
                 _0x8:
0000d8 e0e2      	LDI  R30,LOW(2)
0000d9 9508      	RET
                 ; 0000 00D0 }
                 ; .FEND
                 ;
                 ;
                 ;/*
                 ;*	Dieu khien cac tin hieu canh bao dua vao trang thai cac co canh bao
                 ;*/
                 ;void	Protect_control(void)
                 ; 0000 00D7 {
                 _Protect_control:
                 ; .FSTART _Protect_control
                 ; 0000 00D8 	unsigned char	Uchar_respone = Processing;
                 ; 0000 00D9 	Uchar_respone = Current_get_value();
0000da 931a      	ST   -Y,R17
                 ;	Uchar_respone -> R17
0000db e012      	LDI  R17,2
0000dc df5e      	RCALL _Current_get_value
0000dd 2f1e      	MOV  R17,R30
                 ; 0000 00DA 	if(Uchar_respone == Err)
0000de 3010      	CPI  R17,0
0000df f419      	BRNE _0x30
                 ; 0000 00DB 	{
                 ; 0000 00DC 		BUZZER_ON;
0000e0 9ac0      	SBI  0x18,0
                 ; 0000 00DD 		RELAY_ON;
0000e1 9ac1      	SBI  0x18,1
                 ; 0000 00DE 	}
                 ; 0000 00DF 	else if(Uchar_respone == Ok)
0000e2 c004      	RJMP _0x35
                 _0x30:
0000e3 3011      	CPI  R17,1
0000e4 f411      	BRNE _0x36
                 ; 0000 00E0 	{
                 ; 0000 00E1 		BUZZER_OFF;
0000e5 98c0      	CBI  0x18,0
                 ; 0000 00E2 		RELAY_OFF;
0000e6 98c1      	CBI  0x18,1
                 ; 0000 00E3 	}
                 ; 0000 00E4 }
                 _0x36:
                 _0x35:
0000e7 9119      	LD   R17,Y+
0000e8 9508      	RET
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00E7 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00E8 // Declare your local variables here
                 ; 0000 00E9 // Crystal Oscillator division factor: 1
                 ; 0000 00EA #pragma optsize-
                 ; 0000 00EB CLKPR=(1<<CLKPCE);
0000e9 e8e0      	LDI  R30,LOW(128)
0000ea bde6      	OUT  0x26,R30
                 ; 0000 00EC CLKPR=(0<<CLKPCE) | (0<<CLKPS3) | (0<<CLKPS2) | (0<<CLKPS1) | (0<<CLKPS0);
0000eb e0e0      	LDI  R30,LOW(0)
0000ec bde6      	OUT  0x26,R30
                 ; 0000 00ED #ifdef _OPTIMIZE_SIZE_
                 ; 0000 00EE #pragma optsize+
                 ; 0000 00EF #endif
                 ; 0000 00F0 // Input/Output Ports initialization
                 ; 0000 00F1 // Port A initialization
                 ; 0000 00F2 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00F3 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0000ed bbea      	OUT  0x1A,R30
                 ; 0000 00F4 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00F5 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0000ee bbeb      	OUT  0x1B,R30
                 ; 0000 00F6 
                 ; 0000 00F7 // Port B initialization
                 ; 0000 00F8 // Function: Bit3=Out Bit2=In Bit1=Out Bit0=Out
                 ; 0000 00F9 DDRB=(1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
0000ef e0ef      	LDI  R30,LOW(15)
0000f0 bbe7      	OUT  0x17,R30
                 ; 0000 00FA // State: Bit3=0 Bit2=T Bit1=0 Bit0=0
                 ; 0000 00FB PORTB=(0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0000f1 e0e0      	LDI  R30,LOW(0)
0000f2 bbe8      	OUT  0x18,R30
                 ; 0000 00FC 
                 ; 0000 00FD // Timer/Counter 0 initialization
                 ; 0000 00FE // Clock source: System Clock
                 ; 0000 00FF // Clock value: Timer 0 Stopped
                 ; 0000 0100 // Mode: Normal top=0xFF
                 ; 0000 0101 // OC0A output: Disconnected
                 ; 0000 0102 // OC0B output: Disconnected
                 ; 0000 0103 TCCR0A=(0<<COM0A1) | (0<<COM0A0) | (0<<COM0B1) | (0<<COM0B0) | (0<<WGM01) | (0<<WGM00);
0000f3 bfe0      	OUT  0x30,R30
                 ; 0000 0104 TCCR0B=(0<<WGM02) | (0<<CS02) | (0<<CS01) | (0<<CS00);
0000f4 bfe3      	OUT  0x33,R30
                 ; 0000 0105 TCNT0=0x00;
0000f5 bfe2      	OUT  0x32,R30
                 ; 0000 0106 OCR0A=0x00;
0000f6 bfe6      	OUT  0x36,R30
                 ; 0000 0107 OCR0B=0x00;
0000f7 bfec      	OUT  0x3C,R30
                 ; 0000 0108 
                 ; 0000 0109 // Timer/Counter 1 initialization
                 ; 0000 010A // Clock source: System Clock
                 ; 0000 010B // Clock value: 125,000 kHz
                 ; 0000 010C // Mode: Normal top=0xFFFF
                 ; 0000 010D // OC1A output: Disconnected
                 ; 0000 010E // OC1B output: Disconnected
                 ; 0000 010F // Noise Canceler: Off
                 ; 0000 0110 // Input Capture on Falling Edge
                 ; 0000 0111 // Timer Period: 0,1 s
                 ; 0000 0112 // Timer1 Overflow Interrupt: On
                 ; 0000 0113 // Input Capture Interrupt: Off
                 ; 0000 0114 // Compare A Match Interrupt: Off
                 ; 0000 0115 // Compare B Match Interrupt: Off
                 ; 0000 0116 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000f8 bdef      	OUT  0x2F,R30
                 ; 0000 0117 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000f9 e0e3      	LDI  R30,LOW(3)
0000fa bdee      	OUT  0x2E,R30
                 ; 0000 0118 TCNT1H=0xCF;
0000fb d020      	RCALL SUBOPT_0x0
                 ; 0000 0119 TCNT1L=0x2C;
                 ; 0000 011A ICR1H=0x00;
0000fc e0e0      	LDI  R30,LOW(0)
0000fd bde5      	OUT  0x25,R30
                 ; 0000 011B ICR1L=0x00;
0000fe bde4      	OUT  0x24,R30
                 ; 0000 011C OCR1AH=0x00;
0000ff bdeb      	OUT  0x2B,R30
                 ; 0000 011D OCR1AL=0x00;
000100 bdea      	OUT  0x2A,R30
                 ; 0000 011E OCR1BH=0x00;
000101 bde9      	OUT  0x29,R30
                 ; 0000 011F OCR1BL=0x00;
000102 bde8      	OUT  0x28,R30
                 ; 0000 0120 // // Timer/Counter 1 initialization
                 ; 0000 0121 // // Clock source: System Clock
                 ; 0000 0122 // // Clock value: 31.250 kHz
                 ; 0000 0123 // // Mode: Normal top=0xFFFF
                 ; 0000 0124 // // OC1A output: Disconnected
                 ; 0000 0125 // // OC1B output: Disconnected
                 ; 0000 0126 // // Noise Canceler: Off
                 ; 0000 0127 // // Input Capture on Falling Edge
                 ; 0000 0128 // // Timer Period: 1 s
                 ; 0000 0129 // // Timer1 Overflow Interrupt: On
                 ; 0000 012A // // Input Capture Interrupt: Off
                 ; 0000 012B // // Compare A Match Interrupt: Off
                 ; 0000 012C // // Compare B Match Interrupt: Off
                 ; 0000 012D // TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
                 ; 0000 012E // TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
                 ; 0000 012F // TCNT1H=0x85;
                 ; 0000 0130 // TCNT1L=0xEE;
                 ; 0000 0131 // ICR1H=0x00;
                 ; 0000 0132 // ICR1L=0x00;
                 ; 0000 0133 // OCR1AH=0x00;
                 ; 0000 0134 // OCR1AL=0x00;
                 ; 0000 0135 // OCR1BH=0x00;
                 ; 0000 0136 // OCR1BL=0x00;
                 ; 0000 0137 // Timer/Counter 0 Interrupt(s) initialization
                 ; 0000 0138 TIMSK0=(0<<OCIE0B) | (0<<OCIE0A) | (0<<TOIE0);
000103 bfe9      	OUT  0x39,R30
                 ; 0000 0139 
                 ; 0000 013A // Timer/Counter 1 Interrupt(s) initialization
                 ; 0000 013B TIMSK1=(0<<ICIE1) | (0<<OCIE1B) | (0<<OCIE1A) | (1<<TOIE1);
000104 e0e1      	LDI  R30,LOW(1)
000105 b9ec      	OUT  0xC,R30
                 ; 0000 013C 
                 ; 0000 013D // External Interrupt(s) initialization
                 ; 0000 013E // INT0: Off
                 ; 0000 013F // Interrupt on any change on pins PCINT0-7: Off
                 ; 0000 0140 // Interrupt on any change on pins PCINT8-11: Off
                 ; 0000 0141 MCUCR=(0<<ISC01) | (0<<ISC00);
000106 e0e0      	LDI  R30,LOW(0)
000107 bfe5      	OUT  0x35,R30
                 ; 0000 0142 GIMSK=(0<<INT0) | (0<<PCIE1) | (0<<PCIE0);
000108 bfeb      	OUT  0x3B,R30
                 ; 0000 0143 
                 ; 0000 0144 // USI initialization
                 ; 0000 0145 // Mode: Disabled
                 ; 0000 0146 // Clock source: Register & Counter=no clk.
                 ; 0000 0147 // USI Counter Overflow Interrupt: Off
                 ; 0000 0148 USICR=(0<<USISIE) | (0<<USIOIE) | (0<<USIWM1) | (0<<USIWM0) | (0<<USICS1) | (0<<USICS0) | (0<<USICLK) | (0<<USITC);
000109 b9ed      	OUT  0xD,R30
                 ; 0000 0149 
                 ; 0000 014A // Analog Comparator initialization
                 ; 0000 014B // Analog Comparator: Off
                 ; 0000 014C // The Analog Comparator's positive input is
                 ; 0000 014D // connected to the AIN0 pin
                 ; 0000 014E // The Analog Comparator's negative input is
                 ; 0000 014F // connected to the AIN1 pin
                 ; 0000 0150 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
00010a e8e0      	LDI  R30,LOW(128)
00010b b9e8      	OUT  0x8,R30
                 ; 0000 0151 // Digital input buffer on AIN0: On
                 ; 0000 0152 // Digital input buffer on AIN1: On
                 ; 0000 0153 DIDR0=(0<<ADC1D) | (0<<ADC2D);
00010c e0e0      	LDI  R30,LOW(0)
00010d b9e1      	OUT  0x1,R30
                 ; 0000 0154 
                 ; 0000 0155 
                 ; 0000 0156 // ADC initialization
                 ; 0000 0157 // // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0158 // // ADC Voltage Reference: AVCC pin
                 ; 0000 0159 // // ADC Bipolar Input Mode: Off
                 ; 0000 015A // // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 015B // // Digital input buffers on ADC0: On, ADC1: Off, ADC2: Off, ADC3: Off
                 ; 0000 015C // // ADC4: On, ADC5: On, ADC6: On, ADC7: Off
                 ; 0000 015D // DIDR0=(1<<ADC7D) | (0<<ADC6D) | (0<<ADC5D) | (0<<ADC4D) | (1<<ADC3D) | (1<<ADC2D) | (1<<ADC1D) | (0<<ADC0D);
                 ; 0000 015E // ADMUX=ADC_VREF_TYPE;
                 ; 0000 015F // ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
                 ; 0000 0160 // ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
                 ; 0000 0161 
                 ; 0000 0162 
                 ; 0000 0163 // ADC initialization
                 ; 0000 0164 // ADC Clock frequency: 1000.000 kHz
                 ; 0000 0165 // ADC Voltage Reference: AVCC pin
                 ; 0000 0166 // ADC Bipolar Input Mode: Off
                 ; 0000 0167 // ADC Auto Trigger Source: ADC Stopped
                 ; 0000 0168 // Digital input buffers on ADC0: Off, ADC1: On, ADC2: On, ADC3: On
                 ; 0000 0169 // ADC4: Off, ADC5: Off, ADC6: Off, ADC7: On
                 ; 0000 016A DIDR0=(0<<ADC7D) | (1<<ADC6D) | (1<<ADC5D) | (1<<ADC4D) | (0<<ADC3D) | (0<<ADC2D) | (0<<ADC1D) | (1<<ADC0D);
00010e e7e1      	LDI  R30,LOW(113)
00010f b9e1      	OUT  0x1,R30
                 ; 0000 016B ADMUX=ADC_VREF_TYPE;
000110 e0e0      	LDI  R30,LOW(0)
000111 b9e7      	OUT  0x7,R30
                 ; 0000 016C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
000112 e8e3      	LDI  R30,LOW(131)
000113 b9e6      	OUT  0x6,R30
                 ; 0000 016D ADCSRB=(0<<BIN) | (0<<ADLAR) | (0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
000114 e0e0      	LDI  R30,LOW(0)
000115 b9e3      	OUT  0x3,R30
                 ; 0000 016E 
                 ; 0000 016F 
                 ; 0000 0170 // Watchdog Timer initialization
                 ; 0000 0171 // Watchdog Timer Prescaler: OSC/2k
                 ; 0000 0172 // Watchdog timeout action: Reset
                 ; 0000 0173 //#pragma optsize-
                 ; 0000 0174 //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (1<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
                 ; 0000 0175 //WDTCSR=(0<<WDIF) | (0<<WDIE) | (0<<WDP3) | (0<<WDCE) | (1<<WDE) | (0<<WDP2) | (0<<WDP1) | (0<<WDP0);
                 ; 0000 0176 //#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0177 //#pragma optsize+
                 ; 0000 0178 //#endif
                 ; 0000 0179 
                 ; 0000 017A // Global enable interrupts
                 ; 0000 017B #asm("sei")
000116 9478      	sei
                 ; 0000 017C BUZZER_ON;
000117 d092      	RCALL SUBOPT_0x17
                 ; 0000 017D delay_ms(100);
                 ; 0000 017E BUZZER_OFF;
                 ; 0000 017F delay_ms(100);
                 ; 0000 0180 BUZZER_ON;
000118 d091      	RCALL SUBOPT_0x17
                 ; 0000 0181 delay_ms(100);
                 ; 0000 0182 BUZZER_OFF;
                 ; 0000 0183 delay_ms(100);
                 ; 0000 0184 	while (1)
                 _0x43:
                 ; 0000 0185 	{
                 ; 0000 0186 		Protect_control();
000119 dfc0      	RCALL _Protect_control
                 ; 0000 0187 	}
00011a cffe      	RJMP _0x43
                 ; 0000 0188 }
                 _0x46:
00011b cfff      	RJMP _0x46
                 ; .FEND
                 
                 	.DSEG
                 _Uint_Current1_adc:
000068           	.BYTE 0x14
                 _Uint_Current2_adc:
00007c           	.BYTE 0x14
                 _Uint_Current3_adc:
000090           	.BYTE 0x14
                 _Uint_CurrentSet_adc:
0000a4           	.BYTE 0x14
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
00011c ecef      	LDI  R30,LOW(207)
00011d bded      	OUT  0x2D,R30
00011e e2ec      	LDI  R30,LOW(44)
00011f bdec      	OUT  0x2C,R30
000120 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000121 e0e0      	LDI  R30,LOW(0)
000122 83ec      	STD  Y+4,R30
000123 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000124 0fee      	LSL  R30
000125 0fea      	ADD  R30,R26
000126 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
000127 93ed      	ST   X+,R30
000128 93fc      	ST   X,R31
000129 2de3      	MOV  R30,R3
00012a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x4:
00012b 81ec      	LDD  R30,Y+4
00012c eaa4      	LDI  R26,LOW(_Uint_CurrentSet_adc)
00012d 0fee      	LSL  R30
00012e 0fae      	ADD  R26,R30
00012f d187      	RCALL __GETW1P
000130 81a8      	LD   R26,Y
000131 81b9      	LDD  R27,Y+1
000132 0fea      	ADD  R30,R26
000133 1ffb      	ADC  R31,R27
000134 83e8      	ST   Y,R30
000135 83f9      	STD  Y+1,R31
000136 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x5:
000137 81ec      	LDD  R30,Y+4
000138 5fef      	SUBI R30,-LOW(1)
000139 83ec      	STD  Y+4,R30
00013a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x6:
00013b 81ec      	LDD  R30,Y+4
00013c e0f0      	LDI  R31,0
00013d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x7:
00013e 81a8      	LD   R26,Y
00013f 81b9      	LDD  R27,Y+1
000140 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
000141 d162      	RCALL __DIVW21U
000142 83e8      	ST   Y,R30
000143 83f9      	STD  Y+1,R31
000144 dff9      	RCALL SUBOPT_0x7
000145 34a8      	CPI  R26,LOW(0x348)
000146 e0e3      	LDI  R30,HIGH(0x348)
000147 07be      	CPC  R27,R30
000148 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000149 e4e8      	LDI  R30,LOW(840)
00014a e0f3      	LDI  R31,HIGH(840)
00014b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00014c 83e8      	ST   Y,R30
00014d 83f9      	STD  Y+1,R31
00014e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
00014f 81e8      	LD   R30,Y
000150 81f9      	LDD  R31,Y+1
000151 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0xC:
000152 e0aa      	LDI  R26,LOW(10)
000153 e0b0      	LDI  R27,HIGH(10)
000154 d13f      	RCALL __MULW12U
000155 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:15 WORDS
                 SUBOPT_0xD:
000156 01df      	MOVW R26,R30
000157 dff1      	RCALL SUBOPT_0x9
000158 d14b      	RCALL __DIVW21U
000159 2766      	CLR  R22
00015a 2777      	CLR  R23
00015b d0c6      	RCALL __CDF1
                +
00015c e0a0     +LDI R26 , LOW ( 0x41000000 )
00015d e0b0     +LDI R27 , HIGH ( 0x41000000 )
00015e e080     +LDI R24 , BYTE3 ( 0x41000000 )
00015f e491     +LDI R25 , BYTE4 ( 0x41000000 )
                 	__GETD2N 0x41000000
000160 d0ef      	RCALL __MULF12
000161 d087      	RCALL __CFD1U
000162 2766      	CLR  R22
000163 2777      	CLR  R23
000164 5be0      	SUBI R30,LOW(-80)
000165 4fff      	SBCI R31,HIGH(-80)
000166 dfe5      	RCALL SUBOPT_0xA
000167 cfb9      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0xE:
000168 81ec      	LDD  R30,Y+4
000169 e6a8      	LDI  R26,LOW(_Uint_Current1_adc)
00016a 0fee      	LSL  R30
00016b 0fae      	ADD  R26,R30
00016c d14a      	RCALL __GETW1P
00016d 81aa      	LDD  R26,Y+2
00016e 81bb      	LDD  R27,Y+2+1
00016f 0fea      	ADD  R30,R26
000170 1ffb      	ADC  R31,R27
000171 83ea      	STD  Y+2,R30
000172 83fb      	STD  Y+2+1,R31
000173 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0xF:
000174 81aa      	LDD  R26,Y+2
000175 81bb      	LDD  R27,Y+2+1
000176 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:53 WORDS
                 SUBOPT_0x10:
000177 d12c      	RCALL __DIVW21U
000178 83ea      	STD  Y+2,R30
000179 83fb      	STD  Y+2+1,R31
00017a e0a5      	LDI  R26,LOW(5)
00017b e0b0      	LDI  R27,HIGH(5)
00017c d117      	RCALL __MULW12U
00017d e0a6      	LDI  R26,LOW(6)
00017e e0b0      	LDI  R27,HIGH(6)
00017f d114      	RCALL __MULW12U
000180 cfd1      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:38 WORDS
                 SUBOPT_0x11:
000181 d108      	RCALL __LSRW2
000182 2fef      	MOV  R30,R31
000183 e0f0      	LDI  R31,0
000184 83ea      	STD  Y+2,R30
000185 83fb      	STD  Y+2+1,R31
000186 dfc8      	RCALL SUBOPT_0xB
000187 dfec      	RCALL SUBOPT_0xF
000188 17ea      	CP   R30,R26
000189 07fb      	CPC  R31,R27
00018a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x12:
00018b 81ec      	LDD  R30,Y+4
00018c e7ac      	LDI  R26,LOW(_Uint_Current2_adc)
00018d 0fee      	LSL  R30
00018e 0fae      	ADD  R26,R30
00018f d127      	RCALL __GETW1P
000190 dfe3      	RCALL SUBOPT_0xF
000191 0fea      	ADD  R30,R26
000192 1ffb      	ADC  R31,R27
000193 83ea      	STD  Y+2,R30
000194 83fb      	STD  Y+2+1,R31
000195 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x13:
000196 81ec      	LDD  R30,Y+4
000197 e9a0      	LDI  R26,LOW(_Uint_Current3_adc)
000198 0fee      	LSL  R30
000199 0fae      	ADD  R26,R30
00019a d11c      	RCALL __GETW1P
00019b dfd8      	RCALL SUBOPT_0xF
00019c 0fea      	ADD  R30,R26
00019d 1ffb      	ADC  R31,R27
00019e 83ea      	STD  Y+2,R30
00019f 83fb      	STD  Y+2+1,R31
0001a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x14:
0001a1 81ac      	LDD  R26,Y+4
0001a2 30aa      	CPI  R26,LOW(0xA)
0001a3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x15:
0001a4 e0ea      	LDI  R30,LOW(10)
0001a5 e0f0      	LDI  R31,HIGH(10)
0001a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x16:
0001a7 dfcc      	RCALL SUBOPT_0xF
0001a8 dffb      	RCALL SUBOPT_0x15
0001a9 cfcd      	RJMP SUBOPT_0x10
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x17:
0001aa 9ac0      	SBI  0x18,0
0001ab e6a4      	LDI  R26,LOW(100)
0001ac e0b0      	LDI  R27,0
0001ad d004      	RCALL _delay_ms
0001ae 98c0      	CBI  0x18,0
0001af e6a4      	LDI  R26,LOW(100)
0001b0 e0b0      	LDI  R27,0
0001b1 c000      	RJMP _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001b2 9610      	adiw r26,0
0001b3 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001b4 ed80     +LDI R24 , LOW ( 0x7D0 )
0001b5 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001b6 9701     +SBIW R24 , 1
0001b7 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b8 95a8      	wdr
0001b9 9711      	sbiw r26,1
0001ba f7c9      	brne __delay_ms0
                 __delay_ms1:
0001bb 9508      	ret
                 
                 __ROUND_REPACK:
0001bc 2355      	TST  R21
0001bd f442      	BRPL __REPACK
0001be 3850      	CPI  R21,0x80
0001bf f411      	BRNE __ROUND_REPACK0
0001c0 ffe0      	SBRS R30,0
0001c1 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
0001c2 9631      	ADIW R30,1
0001c3 1f69      	ADC  R22,R25
0001c4 1f79      	ADC  R23,R25
0001c5 f06b      	BRVS __REPACK1
                 
                 __REPACK:
0001c6 e850      	LDI  R21,0x80
0001c7 2757      	EOR  R21,R23
0001c8 f411      	BRNE __REPACK0
0001c9 935f      	PUSH R21
0001ca c073      	RJMP __ZERORES
                 __REPACK0:
0001cb 3f5f      	CPI  R21,0xFF
0001cc f031      	BREQ __REPACK1
0001cd 0f66      	LSL  R22
0001ce 0c00      	LSL  R0
0001cf 9557      	ROR  R21
0001d0 9567      	ROR  R22
0001d1 2f75      	MOV  R23,R21
0001d2 9508      	RET
                 __REPACK1:
0001d3 935f      	PUSH R21
0001d4 2000      	TST  R0
0001d5 f00a      	BRMI __REPACK2
0001d6 c073      	RJMP __MAXRES
                 __REPACK2:
0001d7 c06c      	RJMP __MINRES
                 
                 __UNPACK:
0001d8 e850      	LDI  R21,0x80
0001d9 2e19      	MOV  R1,R25
0001da 2215      	AND  R1,R21
0001db 0f88      	LSL  R24
0001dc 1f99      	ROL  R25
0001dd 2795      	EOR  R25,R21
0001de 0f55      	LSL  R21
0001df 9587      	ROR  R24
                 
                 __UNPACK1:
0001e0 e850      	LDI  R21,0x80
0001e1 2e07      	MOV  R0,R23
0001e2 2205      	AND  R0,R21
0001e3 0f66      	LSL  R22
0001e4 1f77      	ROL  R23
0001e5 2775      	EOR  R23,R21
0001e6 0f55      	LSL  R21
0001e7 9567      	ROR  R22
0001e8 9508      	RET
                 
                 __CFD1U:
0001e9 9468      	SET
0001ea c001      	RJMP __CFD1U0
                 __CFD1:
0001eb 94e8      	CLT
                 __CFD1U0:
0001ec 935f      	PUSH R21
0001ed dff2      	RCALL __UNPACK1
0001ee 3870      	CPI  R23,0x80
0001ef f018      	BRLO __CFD10
0001f0 3f7f      	CPI  R23,0xFF
0001f1 f408      	BRCC __CFD10
0001f2 c04b      	RJMP __ZERORES
                 __CFD10:
0001f3 e156      	LDI  R21,22
0001f4 1b57      	SUB  R21,R23
0001f5 f4aa      	BRPL __CFD11
0001f6 9551      	NEG  R21
0001f7 3058      	CPI  R21,8
0001f8 f40e      	BRTC __CFD19
0001f9 3059      	CPI  R21,9
                 __CFD19:
0001fa f030      	BRLO __CFD17
0001fb efef      	SER  R30
0001fc efff      	SER  R31
0001fd ef6f      	SER  R22
0001fe e77f      	LDI  R23,0x7F
0001ff f977      	BLD  R23,7
000200 c01a      	RJMP __CFD15
                 __CFD17:
000201 2777      	CLR  R23
000202 2355      	TST  R21
000203 f0b9      	BREQ __CFD15
                 __CFD18:
000204 0fee      	LSL  R30
000205 1fff      	ROL  R31
000206 1f66      	ROL  R22
000207 1f77      	ROL  R23
000208 955a      	DEC  R21
000209 f7d1      	BRNE __CFD18
00020a c010      	RJMP __CFD15
                 __CFD11:
00020b 2777      	CLR  R23
                 __CFD12:
00020c 3058      	CPI  R21,8
00020d f028      	BRLO __CFD13
00020e 2fef      	MOV  R30,R31
00020f 2ff6      	MOV  R31,R22
000210 2f67      	MOV  R22,R23
000211 5058      	SUBI R21,8
000212 cff9      	RJMP __CFD12
                 __CFD13:
000213 2355      	TST  R21
000214 f031      	BREQ __CFD15
                 __CFD14:
000215 9576      	LSR  R23
000216 9567      	ROR  R22
000217 95f7      	ROR  R31
000218 95e7      	ROR  R30
000219 955a      	DEC  R21
00021a f7d1      	BRNE __CFD14
                 __CFD15:
00021b 2000      	TST  R0
00021c f40a      	BRPL __CFD16
00021d d064      	RCALL __ANEGD1
                 __CFD16:
00021e 915f      	POP  R21
00021f 9508      	RET
                 
                 __CDF1U:
000220 9468      	SET
000221 c001      	RJMP __CDF1U0
                 __CDF1:
000222 94e8      	CLT
                 __CDF1U0:
000223 9730      	SBIW R30,0
000224 4060      	SBCI R22,0
000225 4070      	SBCI R23,0
000226 f0b1      	BREQ __CDF10
000227 2400      	CLR  R0
000228 f026      	BRTS __CDF11
000229 2377      	TST  R23
00022a f412      	BRPL __CDF11
00022b 9400      	COM  R0
00022c d055      	RCALL __ANEGD1
                 __CDF11:
00022d 2e17      	MOV  R1,R23
00022e e17e      	LDI  R23,30
00022f 2011      	TST  R1
                 __CDF12:
000230 f032      	BRMI __CDF13
000231 957a      	DEC  R23
000232 0fee      	LSL  R30
000233 1fff      	ROL  R31
000234 1f66      	ROL  R22
000235 1c11      	ROL  R1
000236 cff9      	RJMP __CDF12
                 __CDF13:
000237 2fef      	MOV  R30,R31
000238 2ff6      	MOV  R31,R22
000239 2d61      	MOV  R22,R1
00023a 935f      	PUSH R21
00023b df8a      	RCALL __REPACK
00023c 915f      	POP  R21
                 __CDF10:
00023d 9508      	RET
                 
                 __ZERORES:
00023e 27ee      	CLR  R30
00023f 27ff      	CLR  R31
000240 2766      	CLR  R22
000241 2777      	CLR  R23
000242 915f      	POP  R21
000243 9508      	RET
                 
                 __MINRES:
000244 efef      	SER  R30
000245 efff      	SER  R31
000246 e76f      	LDI  R22,0x7F
000247 ef7f      	SER  R23
000248 915f      	POP  R21
000249 9508      	RET
                 
                 __MAXRES:
00024a efef      	SER  R30
00024b efff      	SER  R31
00024c e76f      	LDI  R22,0x7F
00024d e77f      	LDI  R23,0x7F
00024e 915f      	POP  R21
00024f 9508      	RET
                 
                 __MULF12:
000250 935f      	PUSH R21
000251 df86      	RCALL __UNPACK
000252 3870      	CPI  R23,0x80
000253 f351      	BREQ __ZERORES
000254 3890      	CPI  R25,0x80
000255 f341      	BREQ __ZERORES
000256 2401      	EOR  R0,R1
000257 9408      	SEC
000258 1f79      	ADC  R23,R25
000259 f423      	BRVC __MULF124
00025a f31c      	BRLT __ZERORES
                 __MULF125:
00025b 2000      	TST  R0
00025c f33a      	BRMI __MINRES
00025d cfec      	RJMP __MAXRES
                 __MULF124:
00025e 933f      	PUSH R19
00025f 934f      	PUSH R20
000260 2411      	CLR  R1
000261 2733      	CLR  R19
000262 2744      	CLR  R20
000263 2755      	CLR  R21
000264 e198      	LDI  R25,24
                 __MULF120:
000265 0f33      	LSL  R19
000266 1f44      	ROL  R20
000267 1f55      	ROL  R21
000268 1fee      	ROL  R30
000269 1fff      	ROL  R31
00026a 1f66      	ROL  R22
00026b f430      	BRCC __MULF121
00026c 0f3a      	ADD  R19,R26
00026d 1f4b      	ADC  R20,R27
00026e 1f58      	ADC  R21,R24
00026f 1de1      	ADC  R30,R1
000270 1df1      	ADC  R31,R1
000271 1d61      	ADC  R22,R1
                 __MULF121:
000272 959a      	DEC  R25
000273 f789      	BRNE __MULF120
000274 914f      	POP  R20
000275 913f      	POP  R19
000276 2366      	TST  R22
000277 f02a      	BRMI __MULF122
000278 0f55      	LSL  R21
000279 1fee      	ROL  R30
00027a 1fff      	ROL  R31
00027b 1f66      	ROL  R22
00027c c002      	RJMP __MULF123
                 __MULF122:
00027d 9573      	INC  R23
00027e f2e3      	BRVS __MULF125
                 __MULF123:
00027f df3c      	RCALL __ROUND_REPACK
000280 915f      	POP  R21
000281 9508      	RET
                 
                 __ANEGD1:
000282 95f0      	COM  R31
000283 9560      	COM  R22
000284 9570      	COM  R23
000285 95e1      	NEG  R30
000286 4fff      	SBCI R31,-1
000287 4f6f      	SBCI R22,-1
000288 4f7f      	SBCI R23,-1
000289 9508      	RET
                 
                 __LSRW2:
00028a 95f6      	LSR  R31
00028b 95e7      	ROR  R30
00028c 95f6      	LSR  R31
00028d 95e7      	ROR  R30
00028e 9508      	RET
                 
                 __CWD1:
00028f 2f6f      	MOV  R22,R31
000290 0f66      	ADD  R22,R22
000291 0b66      	SBC  R22,R22
000292 2f76      	MOV  R23,R22
000293 9508      	RET
                 
                 __MULW12U:
000294 2e0a      	MOV  R0,R26
000295 2e1b      	MOV  R1,R27
000296 e181      	LDI  R24,17
000297 27aa      	CLR  R26
000298 1bbb      	SUB  R27,R27
000299 c005      	RJMP __MULW12U1
                 __MULW12U3:
00029a f410      	BRCC __MULW12U2
00029b 0da0      	ADD  R26,R0
00029c 1db1      	ADC  R27,R1
                 __MULW12U2:
00029d 95b6      	LSR  R27
00029e 95a7      	ROR  R26
                 __MULW12U1:
00029f 95f7      	ROR  R31
0002a0 95e7      	ROR  R30
0002a1 958a      	DEC  R24
0002a2 f7b9      	BRNE __MULW12U3
0002a3 9508      	RET
                 
                 __DIVW21U:
0002a4 2400      	CLR  R0
0002a5 2411      	CLR  R1
0002a6 e190      	LDI  R25,16
                 __DIVW21U1:
0002a7 0faa      	LSL  R26
0002a8 1fbb      	ROL  R27
0002a9 1c00      	ROL  R0
0002aa 1c11      	ROL  R1
0002ab 1a0e      	SUB  R0,R30
0002ac 0a1f      	SBC  R1,R31
0002ad f418      	BRCC __DIVW21U2
0002ae 0e0e      	ADD  R0,R30
0002af 1e1f      	ADC  R1,R31
0002b0 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002b1 60a1      	SBR  R26,1
                 __DIVW21U3:
0002b2 959a      	DEC  R25
0002b3 f799      	BRNE __DIVW21U1
0002b4 01fd      	MOVW R30,R26
0002b5 01d0      	MOVW R26,R0
0002b6 9508      	RET
                 
                 __GETW1P:
0002b7 91ed      	LD   R30,X+
0002b8 91fc      	LD   R31,X
0002b9 95aa      	DEC  R26
0002ba 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny24A register use summary:
r0 :  16 r1 :  17 r2 :   0 r3 :   9 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   6 r18:   0 r19:   5 r20:   5 r21:  41 r22:  31 r23:  32 
r24:  14 r25:  13 r26:  63 r27:  23 r28:   5 r29:   0 r30: 153 r31:  46 
x  :   8 y  :  49 z  :   0 
Registers used: 18 out of 35 (51.4%)

ATtiny24A instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  14 add   :  13 
adiw  :   5 and   :   2 andi  :   1 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :   7 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 
brlt  :   1 brmi  :   4 brne  :  14 brpl  :   4 brsh  :  13 brtc  :   1 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   0 cbi   :   4 
cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 clr   :  20 
cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 cp    :   6 
cpc   :   2 cpi   :  13 cpse  :   0 dec   :  10 des   :   0 eor   :   4 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   2 
inc   :   2 ld    :   8 ldd   :  18 ldi   :  83 lds   :   0 lpm   :   0 
lsl   :  16 lsr   :   4 mov   :  18 movw  :   3 mul   :   0 muls  :   0 
mulsu :   0 neg   :   2 nop   :   0 or    :   0 ori   :   0 out   :  39 
pop   :  12 push  :  11 rcall : 108 ret   :  39 reti  :   1 rjmp  :  58 
rol   :  19 ror   :  12 sbc   :   2 sbci  :   6 sbi   :   7 sbic  :   1 
sbis  :   2 sbiw  :   4 sbr   :   1 sbrc  :   0 sbrs  :   1 sec   :   1 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   2 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  13 std   :  18 
sts   :   0 sub   :   3 subi  :   3 swap  :   0 tst   :   9 wdr   :   1 

Instructions used: 65 out of 114 (57.0%)

ATtiny24A memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000576   1398      0   1398    2048  68.3%
[.dseg] 0x000060 0x0000b8      0     80     80     128  62.5%
[.eseg] 0x000000 0x000000      0      0      0     128   0.0%

Assembly complete, 0 errors, 1 warnings
